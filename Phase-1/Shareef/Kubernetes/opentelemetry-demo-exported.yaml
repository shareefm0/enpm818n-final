apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-accountingservice-8555cb59fb-
    labels:
      app.kubernetes.io/component: accountingservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-accountingservice
      opentelemetry.io/name: opentelemetry-demo-accountingservice
      pod-template-hash: 8555cb59fb
    name: opentelemetry-demo-accountingservice-8555cb59fb-6mp9l
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-accountingservice-8555cb59fb
      uid: 9694bbf1-9077-4f63-b74e-faf8656ab0e1
    resourceVersion: "22432"
    uid: f39fd93d-7aca-488a-9904-617b0b0a4b3b
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: KAFKA_SERVICE_ADDR
        value: opentelemetry-demo-kafka:9092
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-accountingservice
      imagePullPolicy: IfNotPresent
      name: accountingservice
      resources:
        limits:
          memory: 120Mi
        requests:
          memory: 120Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s2p2m
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - sh
      - -c
      - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for kafka;
        sleep 2; done;
      image: busybox:latest
      imagePullPolicy: Always
      name: wait-for-kafka
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s2p2m
        readOnly: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-s2p2m
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:54Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a018cba9d5ae6a13bbce4eeee786f51a3b8783c220d0c12cedceff4d776bb5b4
      image: ghcr.io/open-telemetry/demo:1.12.0-accountingservice
      imageID: ghcr.io/open-telemetry/demo@sha256:6d051840bb29d727d241d3b332f72a7023fa851c7a5075ba53286d0e80cfab33
      lastState: {}
      name: accountingservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:50:22Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s2p2m
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    initContainerStatuses:
    - containerID: containerd://b54614b397ea7b98750a14e8b5bef28d06292c7136ad7c96065953ce3a88b031
      image: docker.io/library/busybox:latest
      imageID: docker.io/library/busybox@sha256:db142d433cdde11f10ae479dbf92f3b13d693fd1c91053da9979728cceb1dc68
      lastState: {}
      name: wait-for-kafka
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://b54614b397ea7b98750a14e8b5bef28d06292c7136ad7c96065953ce3a88b031
          exitCode: 0
          finishedAt: "2024-11-30T15:50:17Z"
          reason: Completed
          startedAt: "2024-11-30T15:48:53Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s2p2m
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.30.101
    podIPs:
    - ip: 192.168.30.101
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-adservice-5df4bf56d6-
    labels:
      app.kubernetes.io/component: adservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-adservice
      opentelemetry.io/name: opentelemetry-demo-adservice
      pod-template-hash: 5df4bf56d6
    name: opentelemetry-demo-adservice-5df4bf56d6-xhq9b
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-adservice-5df4bf56d6
      uid: 0a6a4be4-fe58-474d-a714-426960543e94
    resourceVersion: "22181"
    uid: 542387f8-b360-4505-9bbc-d53b463fe8fe
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: AD_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: OTEL_LOGS_EXPORTER
        value: otlp
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-adservice
      imagePullPolicy: IfNotPresent
      name: adservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 300Mi
        requests:
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-llsbc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-llsbc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://22c50a17cce52b1d4aa36b11076c15498cbe04d39254ae1b1af09c8f2cd913a0
      image: ghcr.io/open-telemetry/demo:1.12.0-adservice
      imageID: ghcr.io/open-telemetry/demo@sha256:a59e5eead495be5c2e559020d856e707e91856ddcbe3dba94a3333d390f8f104
      lastState: {}
      name: adservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:33Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-llsbc
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.116.251
    podIPs:
    - ip: 192.168.116.251
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-cartservice-694df79ff7-
    labels:
      app.kubernetes.io/component: cartservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-cartservice
      opentelemetry.io/name: opentelemetry-demo-cartservice
      pod-template-hash: 694df79ff7
    name: opentelemetry-demo-cartservice-694df79ff7-dz8b8
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-cartservice-694df79ff7
      uid: be8b12b4-510d-4ff7-b33a-ce66cb409c7e
    resourceVersion: "22269"
    uid: eef700b9-bcb5-488d-a81c-42ee86b7c0d2
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: CART_SERVICE_PORT
        value: "8080"
      - name: ASPNETCORE_URLS
        value: http://*:$(CART_SERVICE_PORT)
      - name: VALKEY_ADDR
        value: opentelemetry-demo-valkey:6379
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-cartservice
      imagePullPolicy: IfNotPresent
      name: cartservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 160Mi
        requests:
          memory: 160Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r86sx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - sh
      - -c
      - until nc -z -v -w30 opentelemetry-demo-valkey 6379; do echo waiting for valkey;
        sleep 2; done;
      image: busybox:latest
      imagePullPolicy: Always
      name: wait-for-valkey
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r86sx
        readOnly: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-r86sx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:55Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://dbf0022560353136dbc94ced672e87a9d3acbae2e54d0cb153e3907605c443f2
      image: ghcr.io/open-telemetry/demo:1.12.0-cartservice
      imageID: ghcr.io/open-telemetry/demo@sha256:89730afa0b5d7f48de4db32b038b5228ce77a8914fe6156f09b944efb0bacf45
      lastState: {}
      name: cartservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:45Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r86sx
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    initContainerStatuses:
    - containerID: containerd://8472956784b5c64bd736ac489e39e2d765d0f51aa9c4bfcc36c04427005c400e
      image: docker.io/library/busybox:latest
      imageID: docker.io/library/busybox@sha256:db142d433cdde11f10ae479dbf92f3b13d693fd1c91053da9979728cceb1dc68
      lastState: {}
      name: wait-for-valkey
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://8472956784b5c64bd736ac489e39e2d765d0f51aa9c4bfcc36c04427005c400e
          exitCode: 0
          finishedAt: "2024-11-30T15:49:24Z"
          reason: Completed
          startedAt: "2024-11-30T15:48:54Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r86sx
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.122.63
    podIPs:
    - ip: 192.168.122.63
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-checkoutservice-744b6cdd6-
    labels:
      app.kubernetes.io/component: checkoutservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-checkoutservice
      opentelemetry.io/name: opentelemetry-demo-checkoutservice
      pod-template-hash: 744b6cdd6
    name: opentelemetry-demo-checkoutservice-744b6cdd6-7bk5v
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-checkoutservice-744b6cdd6
      uid: 9f64e5ed-d5bc-4a24-8d2e-e9f9a0f2713f
    resourceVersion: "22415"
    uid: d70fba1e-11c5-45a8-96ef-4b88c9874906
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: CHECKOUT_SERVICE_PORT
        value: "8080"
      - name: CART_SERVICE_ADDR
        value: opentelemetry-demo-cartservice:8080
      - name: CURRENCY_SERVICE_ADDR
        value: opentelemetry-demo-currencyservice:8080
      - name: EMAIL_SERVICE_ADDR
        value: http://opentelemetry-demo-emailservice:8080
      - name: PAYMENT_SERVICE_ADDR
        value: opentelemetry-demo-paymentservice:8080
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: opentelemetry-demo-productcatalogservice:8080
      - name: SHIPPING_SERVICE_ADDR
        value: opentelemetry-demo-shippingservice:8080
      - name: KAFKA_SERVICE_ADDR
        value: opentelemetry-demo-kafka:9092
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-checkoutservice
      imagePullPolicy: IfNotPresent
      name: checkoutservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 20Mi
        requests:
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85wdb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - sh
      - -c
      - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for kafka;
        sleep 2; done;
      image: busybox:latest
      imagePullPolicy: Always
      name: wait-for-kafka
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85wdb
        readOnly: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-85wdb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:54Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c88b42ed749e9fb279bed828ab90a1e4ec9f792ae11581945fab0e25db41c58c
      image: ghcr.io/open-telemetry/demo:1.12.0-checkoutservice
      imageID: ghcr.io/open-telemetry/demo@sha256:380eccdc29e955eaa230ce4a702f3750d8ae398ddd4ea63320eba196f96da98b
      lastState: {}
      name: checkoutservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:50:20Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85wdb
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    initContainerStatuses:
    - containerID: containerd://db46c5092a12d944ac8e50f4d81c7d03b024adbf6eec6771540fd8c427088ce4
      image: docker.io/library/busybox:latest
      imageID: docker.io/library/busybox@sha256:db142d433cdde11f10ae479dbf92f3b13d693fd1c91053da9979728cceb1dc68
      lastState: {}
      name: wait-for-kafka
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://db46c5092a12d944ac8e50f4d81c7d03b024adbf6eec6771540fd8c427088ce4
          exitCode: 0
          finishedAt: "2024-11-30T15:50:17Z"
          reason: Completed
          startedAt: "2024-11-30T15:48:53Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85wdb
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.30.151
    podIPs:
    - ip: 192.168.30.151
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-currencyservice-6b8fcd9bd6-
    labels:
      app.kubernetes.io/component: currencyservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-currencyservice
      opentelemetry.io/name: opentelemetry-demo-currencyservice
      pod-template-hash: 6b8fcd9bd6
    name: opentelemetry-demo-currencyservice-6b8fcd9bd6-gblsd
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-currencyservice-6b8fcd9bd6
      uid: 0b15eb1f-4a31-4cfe-83ec-0f60d8dc830e
    resourceVersion: "22031"
    uid: 0b94e618-4813-47c6-86bd-d412ff1e5887
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: CURRENCY_SERVICE_PORT
        value: "8080"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: VERSION
        value: 1.12.0
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-currencyservice
      imagePullPolicy: IfNotPresent
      name: currencyservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 20Mi
        requests:
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-29vxx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-29vxx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:10Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:10Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:10Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0fa5699b6a11181c111520ef194cb98232a1b052d60d2e7c18998d0d565e31f5
      image: ghcr.io/open-telemetry/demo:1.12.0-currencyservice
      imageID: ghcr.io/open-telemetry/demo@sha256:db69fdf22ec59b2191ece2d00796eaca93639dce65d5de076b950b673bcffeaf
      lastState: {}
      name: currencyservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:10Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-29vxx
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.107.53
    podIPs:
    - ip: 192.168.107.53
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-emailservice-66d8476fdc-
    labels:
      app.kubernetes.io/component: emailservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-emailservice
      opentelemetry.io/name: opentelemetry-demo-emailservice
      pod-template-hash: 66d8476fdc
    name: opentelemetry-demo-emailservice-66d8476fdc-qjj9l
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-emailservice-66d8476fdc
      uid: bc18ffae-de1d-4578-97b5-7a3b059f8058
    resourceVersion: "22186"
    uid: e662e9ca-e43d-4ee0-b959-18837d37d518
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: EMAIL_SERVICE_PORT
        value: "8080"
      - name: APP_ENV
        value: production
      - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-emailservice
      imagePullPolicy: IfNotPresent
      name: emailservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 100Mi
        requests:
          memory: 100Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zdb76
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-zdb76
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0d9b7fc54a6625849eeae054d81cac5918889b20b73c6886cb1e783e1e0a8955
      image: ghcr.io/open-telemetry/demo:1.12.0-emailservice
      imageID: ghcr.io/open-telemetry/demo@sha256:a1f5cebb524000a5b41282e5e7ffad86bfe0b5bd376e6c56ca626a8fa91b4e3a
      lastState: {}
      name: emailservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:32Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zdb76
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.118.48
    podIPs:
    - ip: 192.168.118.48
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-flagd-679866d767-
    labels:
      app.kubernetes.io/component: flagd
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-flagd
      opentelemetry.io/name: opentelemetry-demo-flagd
      pod-template-hash: 679866d767
    name: opentelemetry-demo-flagd-679866d767-l4kcx
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-flagd-679866d767
      uid: fc97433e-f177-43c0-ac20-7617758abc30
    resourceVersion: "22218"
    uid: 695bfbfb-d1ba-4838-a36b-14d9869ff157
  spec:
    containers:
    - command:
      - /flagd-build
      - start
      - --uri
      - file:./etc/flagd/demo.flagd.json
      env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: FLAGD_METRICS_EXPORTER
        value: otel
      - name: FLAGD_OTEL_COLLECTOR_URI
        value: $(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-feature/flagd:v0.11.1
      imagePullPolicy: IfNotPresent
      name: flagd
      ports:
      - containerPort: 8013
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 50Mi
        requests:
          memory: 50Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/flagd
        name: config-rw
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ffbkr
        readOnly: true
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: FLAGD_METRICS_EXPORTER
        value: otel
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-flagdui
      imagePullPolicy: IfNotPresent
      name: flagdui
      ports:
      - containerPort: 4000
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 150Mi
        requests:
          memory: 150Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/data
        name: config-rw
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ffbkr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - sh
      - -c
      - cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json
      image: busybox
      imagePullPolicy: Always
      name: init-config
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /config-ro
        name: config-ro
      - mountPath: /config-rw
        name: config-rw
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ffbkr
        readOnly: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: config-rw
    - configMap:
        defaultMode: 420
        name: opentelemetry-demo-flagd-config
      name: config-ro
    - name: kube-api-access-ffbkr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:54Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:37Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:37Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9a0178946dbdf334cdda09685bcea38e9420130380850e86364c4b0231faa95d
      image: ghcr.io/open-feature/flagd:v0.11.1
      imageID: ghcr.io/open-feature/flagd@sha256:a7ea52f87446d18020d5b900da4fc29b61015435b1e6756c98236310d73b90b3
      lastState: {}
      name: flagd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:04Z"
      volumeMounts:
      - mountPath: /etc/flagd
        name: config-rw
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ffbkr
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://6332cc8fba346db1c145cf928976691d36fb06416f7b89bfbdfe939fc379ed3e
      image: ghcr.io/open-telemetry/demo:1.12.0-flagdui
      imageID: ghcr.io/open-telemetry/demo@sha256:f6bdafaa9075715dc5a1b9d0f81ab275a5b002606ddeb08c85ee7dcdb116a17c
      lastState: {}
      name: flagdui
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:36Z"
      volumeMounts:
      - mountPath: /app/data
        name: config-rw
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ffbkr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    initContainerStatuses:
    - containerID: containerd://8f70d92d311d9c3da6c743a51fa4807a75f8f86af5f14ab62d43a9749d8f0490
      image: docker.io/library/busybox:latest
      imageID: docker.io/library/busybox@sha256:db142d433cdde11f10ae479dbf92f3b13d693fd1c91053da9979728cceb1dc68
      lastState: {}
      name: init-config
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://8f70d92d311d9c3da6c743a51fa4807a75f8f86af5f14ab62d43a9749d8f0490
          exitCode: 0
          finishedAt: "2024-11-30T15:48:53Z"
          reason: Completed
          startedAt: "2024-11-30T15:48:53Z"
      volumeMounts:
      - mountPath: /config-ro
        name: config-ro
      - mountPath: /config-rw
        name: config-rw
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ffbkr
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.18.30
    podIPs:
    - ip: 192.168.18.30
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-frauddetectionservice-85d48f855f-
    labels:
      app.kubernetes.io/component: frauddetectionservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frauddetectionservice
      opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
      pod-template-hash: 85d48f855f
    name: opentelemetry-demo-frauddetectionservice-85d48f855f-wxmk8
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-frauddetectionservice-85d48f855f
      uid: b7749fa1-39b8-4588-88ae-f020433b884b
    resourceVersion: "22458"
    uid: 28945828-d6a1-485c-8842-d72c81a205e7
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: KAFKA_SERVICE_ADDR
        value: opentelemetry-demo-kafka:9092
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-frauddetectionservice
      imagePullPolicy: IfNotPresent
      name: frauddetectionservice
      resources:
        limits:
          memory: 300Mi
        requests:
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tddxl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - sh
      - -c
      - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for kafka;
        sleep 2; done;
      image: busybox:latest
      imagePullPolicy: Always
      name: wait-for-kafka
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tddxl
        readOnly: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-tddxl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:55Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7b5979c825c9e4a1fe4c79126f04ecce76f5b527a915ccbe0f09370d25dc8eac
      image: ghcr.io/open-telemetry/demo:1.12.0-frauddetectionservice
      imageID: ghcr.io/open-telemetry/demo@sha256:77cefdab4d5c9fe6d11da303ce533b615e4890d4015a26d9ea24ac7c704a44d6
      lastState: {}
      name: frauddetectionservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:50:30Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tddxl
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    initContainerStatuses:
    - containerID: containerd://ad3a95498f7d67e97c1fdf2b47f48c8b734e2aa67bd4a6e700eda1016c58381e
      image: docker.io/library/busybox:latest
      imageID: docker.io/library/busybox@sha256:db142d433cdde11f10ae479dbf92f3b13d693fd1c91053da9979728cceb1dc68
      lastState: {}
      name: wait-for-kafka
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://ad3a95498f7d67e97c1fdf2b47f48c8b734e2aa67bd4a6e700eda1016c58381e
          exitCode: 0
          finishedAt: "2024-11-30T15:50:17Z"
          reason: Completed
          startedAt: "2024-11-30T15:48:53Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tddxl
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.115.241
    podIPs:
    - ip: 192.168.115.241
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-frontend-59bccd8fdb-
    labels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontend
      opentelemetry.io/name: opentelemetry-demo-frontend
      pod-template-hash: 59bccd8fdb
    name: opentelemetry-demo-frontend-59bccd8fdb-mvsq7
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-frontend-59bccd8fdb
      uid: 04f88784-353f-4014-bb8e-09ec53876cec
    resourceVersion: "22342"
    uid: 56453d08-4c08-4b3d-9437-304d97bb42f7
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: FRONTEND_PORT
        value: "8080"
      - name: FRONTEND_ADDR
        value: :8080
      - name: AD_SERVICE_ADDR
        value: opentelemetry-demo-adservice:8080
      - name: CART_SERVICE_ADDR
        value: opentelemetry-demo-cartservice:8080
      - name: CHECKOUT_SERVICE_ADDR
        value: opentelemetry-demo-checkoutservice:8080
      - name: CURRENCY_SERVICE_ADDR
        value: opentelemetry-demo-currencyservice:8080
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: opentelemetry-demo-productcatalogservice:8080
      - name: RECOMMENDATION_SERVICE_ADDR
        value: opentelemetry-demo-recommendationservice:8080
      - name: SHIPPING_SERVICE_ADDR
        value: opentelemetry-demo-shippingservice:8080
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: WEB_OTEL_SERVICE_NAME
        value: frontend-web
      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://localhost:8080/otlp-http/v1/traces
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-frontend
      imagePullPolicy: IfNotPresent
      name: frontend
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 250Mi
        requests:
          memory: 250Mi
      securityContext:
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b62nl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-b62nl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:04Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bf520c80ae86f49db6eef288ef5eacc81be33207fbcbfab37ba06dd8a0507094
      image: ghcr.io/open-telemetry/demo:1.12.0-frontend
      imageID: ghcr.io/open-telemetry/demo@sha256:8b348f00ca4c9687e3bf4ac43cad18441943148090055dd035ddfc6892925cb8
      lastState: {}
      name: frontend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:50:03Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b62nl
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.124.126
    podIPs:
    - ip: 192.168.124.126
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-frontendproxy-74f988cfb4-
    labels:
      app.kubernetes.io/component: frontendproxy
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontendproxy
      opentelemetry.io/name: opentelemetry-demo-frontendproxy
      pod-template-hash: 74f988cfb4
    name: opentelemetry-demo-frontendproxy-74f988cfb4-tl8zl
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-frontendproxy-74f988cfb4
      uid: a9a0db64-eecd-447d-b458-b778998bee14
    resourceVersion: "22088"
    uid: d0049cd5-fc2a-4ed8-8462-9303b060f2d6
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: ENVOY_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: FLAGD_UI_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_UI_PORT
        value: "4000"
      - name: FRONTEND_HOST
        value: opentelemetry-demo-frontend
      - name: FRONTEND_PORT
        value: "8080"
      - name: GRAFANA_SERVICE_HOST
        value: opentelemetry-demo-grafana
      - name: GRAFANA_SERVICE_PORT
        value: "80"
      - name: IMAGE_PROVIDER_HOST
        value: opentelemetry-demo-imageprovider
      - name: IMAGE_PROVIDER_PORT
        value: "8081"
      - name: JAEGER_SERVICE_HOST
        value: opentelemetry-demo-jaeger-query
      - name: JAEGER_SERVICE_PORT
        value: "16686"
      - name: LOCUST_WEB_HOST
        value: opentelemetry-demo-loadgenerator
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: OTEL_COLLECTOR_PORT_GRPC
        value: "4317"
      - name: OTEL_COLLECTOR_PORT_HTTP
        value: "4318"
      - name: OTEL_SERVICE_NAME
        value: frontend-proxy
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-frontendproxy
      imagePullPolicy: IfNotPresent
      name: frontendproxy
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 50Mi
        requests:
          memory: 50Mi
      securityContext:
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lvwxq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-lvwxq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:20Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6734efe2d78173957650b3f1c0879e7465834ceaf8fb1c0c03d6b78456f13d52
      image: ghcr.io/open-telemetry/demo:1.12.0-frontendproxy
      imageID: ghcr.io/open-telemetry/demo@sha256:9fdec1be03e4695aec8c9eff3a2b3d6b854c1e25aa5677a373a63b17f42db743
      lastState: {}
      name: frontendproxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:19Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lvwxq
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.115.64
    podIPs:
    - ip: 192.168.115.64
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 66402109ab73b3549330f38a66f20b78067ca4fdd1b77fc12fd760727d05f34c
      checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
      checksum/secret: bed677784356b2af7fb0d87455db21f077853059b594101a4f6532bfbd962a7f
      kubectl.kubernetes.io/default-container: grafana
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-grafana-69b6bd5dd4-
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: grafana
      pod-template-hash: 69b6bd5dd4
    name: opentelemetry-demo-grafana-69b6bd5dd4-wkkls
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-grafana-69b6bd5dd4
      uid: 9f7bfac0-1b66-45ed-be2f-38b607c0ea4a
    resourceVersion: "22236"
    uid: f3913577-7c93-4a95-8069-4fbbef21bc95
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: GF_SECURITY_ADMIN_USER
        valueFrom:
          secretKeyRef:
            key: admin-user
            name: opentelemetry-demo-grafana
      - name: GF_SECURITY_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin-password
            name: opentelemetry-demo-grafana
      - name: GF_INSTALL_PLUGINS
        valueFrom:
          configMapKeyRef:
            key: plugins
            name: opentelemetry-demo-grafana
      - name: GF_PATHS_DATA
        value: /var/lib/grafana/
      - name: GF_PATHS_LOGS
        value: /var/log/grafana
      - name: GF_PATHS_PLUGINS
        value: /var/lib/grafana/plugins
      - name: GF_PATHS_PROVISIONING
        value: /etc/grafana/provisioning
      image: docker.io/grafana/grafana:11.3.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 10
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: grafana
      ports:
      - containerPort: 3000
        name: grafana
        protocol: TCP
      - containerPort: 9094
        name: gossip-tcp
        protocol: TCP
      - containerPort: 9094
        name: gossip-udp
        protocol: UDP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 150Mi
        requests:
          memory: 150Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/grafana/grafana.ini
        name: config
        subPath: grafana.ini
      - mountPath: /var/lib/grafana
        name: storage
      - mountPath: /var/lib/grafana/dashboards/default
        name: dashboards-default
      - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
        name: config
        subPath: datasources.yaml
      - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
        name: config
        subPath: dashboardproviders.yaml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fm4xh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 472
      runAsGroup: 472
      runAsNonRoot: true
      runAsUser: 472
    serviceAccount: opentelemetry-demo-grafana
    serviceAccountName: opentelemetry-demo-grafana
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: opentelemetry-demo-grafana
      name: config
    - configMap:
        defaultMode: 420
        name: opentelemetry-demo-grafana-dashboards
      name: dashboards-default
    - emptyDir: {}
      name: storage
    - name: kube-api-access-fm4xh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:27Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d72c26714c81519d06f7d390ad5a1369a0784bc4ba5f78da3f6f69fe2fb0e562
      image: docker.io/grafana/grafana:11.3.0
      imageID: docker.io/grafana/grafana@sha256:a0f881232a6fb71a0554a47d0fe2203b6888fe77f4cefb7ea62bed7eb54e13c3
      lastState: {}
      name: grafana
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:26Z"
      volumeMounts:
      - mountPath: /etc/grafana/grafana.ini
        name: config
      - mountPath: /var/lib/grafana
        name: storage
      - mountPath: /var/lib/grafana/dashboards/default
        name: dashboards-default
      - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
        name: config
      - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fm4xh
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.4.46
    podIPs:
    - ip: 192.168.4.46
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:50Z"
    generateName: opentelemetry-demo-imageprovider-7466d894fb-
    labels:
      app.kubernetes.io/component: imageprovider
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-imageprovider
      opentelemetry.io/name: opentelemetry-demo-imageprovider
      pod-template-hash: 7466d894fb
    name: opentelemetry-demo-imageprovider-7466d894fb-hbhrc
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-imageprovider-7466d894fb
      uid: 591b2eb6-fd2b-4433-b8e2-c834b4819f6e
    resourceVersion: "22191"
    uid: 040d372c-4952-4297-9a62-9c2302041f7f
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: IMAGE_PROVIDER_PORT
        value: "8081"
      - name: OTEL_COLLECTOR_PORT_GRPC
        value: "4317"
      - name: OTEL_COLLECTOR_HOST
        value: $(OTEL_COLLECTOR_NAME)
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-imageprovider
      imagePullPolicy: IfNotPresent
      name: imageprovider
      ports:
      - containerPort: 8081
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 50Mi
        requests:
          memory: 50Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cnrzf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-cnrzf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ea614884be54645c280206babfa9deb6e939f9abf55f5f699b7f834df1ee930e
      image: ghcr.io/open-telemetry/demo:1.12.0-imageprovider
      imageID: ghcr.io/open-telemetry/demo@sha256:4e322858fe56df702f5a35f18728fb47d176be3e752f380c9ffc456512a64565
      lastState: {}
      name: imageprovider
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:32Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cnrzf
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.108.53
    podIPs:
    - ip: 192.168.108.53
    qosClass: Burstable
    startTime: "2024-11-30T15:48:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "14269"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-jaeger-7785549bb-
    labels:
      app.kubernetes.io/component: all-in-one
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
      pod-template-hash: 7785549bb
    name: opentelemetry-demo-jaeger-7785549bb-j6wlc
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-jaeger-7785549bb
      uid: 1bb52942-97b4-401f-a7d8-335f04e74f94
    resourceVersion: "21987"
    uid: 314502e9-e6e2-456f-a30f-b9c951a3d8f5
  spec:
    containers:
    - args:
      - --memory.max-traces=5000
      - --query.base-path=/jaeger/ui
      - --prometheus.server-url=http://opentelemetry-demo-prometheus-server:9090
      - --prometheus.query.normalize-calls=true
      - --prometheus.query.normalize-duration=true
      env:
      - name: METRICS_STORAGE_TYPE
        value: prometheus
      - name: COLLECTOR_OTLP_GRPC_HOST_PORT
        value: 0.0.0.0:4317
      - name: COLLECTOR_OTLP_HTTP_HOST_PORT
        value: 0.0.0.0:4318
      - name: SPAN_STORAGE_TYPE
        value: memory
      - name: COLLECTOR_ZIPKIN_HOST_PORT
        value: :9411
      - name: JAEGER_DISABLED
        value: "false"
      - name: COLLECTOR_OTLP_ENABLED
        value: "true"
      image: jaegertracing/all-in-one:1.53.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /
          port: 14269
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 1
      name: jaeger
      ports:
      - containerPort: 5775
        protocol: UDP
      - containerPort: 6831
        protocol: UDP
      - containerPort: 6832
        protocol: UDP
      - containerPort: 5778
        protocol: TCP
      - containerPort: 16686
        protocol: TCP
      - containerPort: 16685
        protocol: TCP
      - containerPort: 9411
        protocol: TCP
      - containerPort: 4317
        protocol: TCP
      - containerPort: 4318
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 14269
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 400Mi
        requests:
          memory: 400Mi
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c5vsb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 10001
      runAsGroup: 10001
      runAsUser: 10001
    serviceAccount: opentelemetry-demo-jaeger
    serviceAccountName: opentelemetry-demo-jaeger
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-c5vsb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:00Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://53596e98cd43a6f1726cfceda3b51a15467d8b1f0e4ad7033d0cec47e4d3883e
      image: docker.io/jaegertracing/all-in-one:1.53.0
      imageID: docker.io/jaegertracing/all-in-one@sha256:60e65bfffe1f66aee96d6fc8b6bf65afd42016be5dcc09d2e15d8462f7d9409c
      lastState: {}
      name: jaeger
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:48:59Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c5vsb
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.30.100
    podIPs:
    - ip: 192.168.30.100
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:50Z"
    generateName: opentelemetry-demo-kafka-76d4d9f48b-
    labels:
      app.kubernetes.io/component: kafka
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-kafka
      opentelemetry.io/name: opentelemetry-demo-kafka
      pod-template-hash: 76d4d9f48b
    name: opentelemetry-demo-kafka-76d4d9f48b-m98vg
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-kafka-76d4d9f48b
      uid: 8dab3a75-77b0-45f1-850a-9330d23b4ba6
    resourceVersion: "22224"
    uid: 1ccd2526-5d4a-4c09-ae29-5cbd514dbbb0
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: KAFKA_ADVERTISED_LISTENERS
        value: PLAINTEXT://opentelemetry-demo-kafka:9092
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: KAFKA_HEAP_OPTS
        value: -Xmx400M -Xms400M
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-kafka
      imagePullPolicy: IfNotPresent
      name: kafka
      ports:
      - containerPort: 9092
        name: plaintext
        protocol: TCP
      - containerPort: 9093
        name: controller
        protocol: TCP
      resources:
        limits:
          memory: 600Mi
        requests:
          memory: 600Mi
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jpf5v
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-jpf5v
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:37Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:37Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:37Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3a19f14e51b921acb26950f1f76b7568367d7b8294994d7cc5a836f440508337
      image: ghcr.io/open-telemetry/demo:1.12.0-kafka
      imageID: ghcr.io/open-telemetry/demo@sha256:071a788162e84bbb7a614aaf941824a44df691be6263a26bd539bcc35d5d2dd7
      lastState: {}
      name: kafka
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:37Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jpf5v
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.104.118
    podIPs:
    - ip: 192.168.104.118
    qosClass: Burstable
    startTime: "2024-11-30T15:48:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:50Z"
    generateName: opentelemetry-demo-loadgenerator-54db796687-
    labels:
      app.kubernetes.io/component: loadgenerator
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-loadgenerator
      opentelemetry.io/name: opentelemetry-demo-loadgenerator
      pod-template-hash: 54db796687
    name: opentelemetry-demo-loadgenerator-54db796687-746rl
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-loadgenerator-54db796687
      uid: 5a6b1af9-6c6a-4b9f-9f23-e7b5df60ed69
    resourceVersion: "22371"
    uid: 452dfde6-45e5-444d-8ae9-95985867edcf
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: LOCUST_USERS
        value: "10"
      - name: LOCUST_SPAWN_RATE
        value: "1"
      - name: LOCUST_HOST
        value: http://opentelemetry-demo-frontendproxy:8080
      - name: LOCUST_HEADLESS
        value: "false"
      - name: LOCUST_AUTOSTART
        value: "true"
      - name: LOCUST_BROWSER_TRAFFIC_ENABLED
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-loadgenerator
      imagePullPolicy: IfNotPresent
      name: loadgenerator
      ports:
      - containerPort: 8089
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 1Gi
        requests:
          memory: 1Gi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6q2rx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-6q2rx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ea3a0bee92d67d17641ac27f7e3c38bd54bbd4e64430ee810d563067697afad0
      image: ghcr.io/open-telemetry/demo:1.12.0-loadgenerator
      imageID: ghcr.io/open-telemetry/demo@sha256:85c9935ff31b7ab575903fbd0b56a3161ec13e508966df25dc68fcfe7af5ec98
      lastState: {}
      name: loadgenerator
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:50:12Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6q2rx
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.127.209
    podIPs:
    - ip: 192.168.127.209
    qosClass: Burstable
    startTime: "2024-11-30T15:48:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 2d923ab8c3aa2c63ec32fe4a7aa4993b12f3e03b2e255f1909b97f5e43b58226
      opentelemetry_community_demo: "true"
      prometheus.io/port: "9464"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-otelcol-5c757cfcf-
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: otelcol
      component: standalone-collector
      pod-template-hash: 5c757cfcf
    name: opentelemetry-demo-otelcol-5c757cfcf-7fpxj
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-otelcol-5c757cfcf
      uid: 18864204-b7c3-4132-9b22-aa375c0e2a57
    resourceVersion: "22076"
    uid: 99f10f18-c8f6-4b58-8cae-4840110ca49f
  spec:
    containers:
    - args:
      - --config=/conf/relay.yaml
      env:
      - name: MY_POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: GOMEMLIMIT
        value: 160MiB
      image: otel/opentelemetry-collector-contrib:0.113.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 13133
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: opentelemetry-collector
      ports:
      - containerPort: 6831
        name: jaeger-compact
        protocol: UDP
      - containerPort: 14250
        name: jaeger-grpc
        protocol: TCP
      - containerPort: 14268
        name: jaeger-thrift
        protocol: TCP
      - containerPort: 8888
        name: metrics
        protocol: TCP
      - containerPort: 4317
        name: otlp
        protocol: TCP
      - containerPort: 4318
        name: otlp-http
        protocol: TCP
      - containerPort: 9464
        name: prometheus
        protocol: TCP
      - containerPort: 9411
        name: zipkin
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 13133
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 200Mi
        requests:
          memory: 200Mi
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /conf
        name: opentelemetry-collector-configmap
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vw4f7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo-otelcol
    serviceAccountName: opentelemetry-demo-otelcol
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: relay
          path: relay.yaml
        name: opentelemetry-demo-otelcol
      name: opentelemetry-collector-configmap
    - name: kube-api-access-vw4f7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:18Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3a1ee9de22b683f3d5e4f8371da1797cbeb6bc9130bfe1374128573249a59f46
      image: docker.io/otel/opentelemetry-collector-contrib:0.113.0
      imageID: docker.io/otel/opentelemetry-collector-contrib@sha256:5ac3e0ba2b0bd00943d067e7d8c262fd75cbe85878e59fb9879cd3eb481c69ee
      lastState: {}
      name: opentelemetry-collector
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:17Z"
      volumeMounts:
      - mountPath: /conf
        name: opentelemetry-collector-configmap
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vw4f7
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.15.65
    podIPs:
    - ip: 192.168.15.65
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:50Z"
    generateName: opentelemetry-demo-paymentservice-857974bcdb-
    labels:
      app.kubernetes.io/component: paymentservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-paymentservice
      opentelemetry.io/name: opentelemetry-demo-paymentservice
      pod-template-hash: 857974bcdb
    name: opentelemetry-demo-paymentservice-857974bcdb-8mbbx
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-paymentservice-857974bcdb
      uid: d73c5bfb-7991-49ed-95ec-80725db957d2
    resourceVersion: "22094"
    uid: b70dca49-6e16-42cc-9fa6-1fe35a3d7e5d
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: PAYMENT_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-paymentservice
      imagePullPolicy: IfNotPresent
      name: paymentservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 120Mi
        requests:
          memory: 120Mi
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c7bnt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-c7bnt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:20Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0315226b734555710bb4ebffce99ea70090f59a3aafbb8011c9d109197d1e06b
      image: ghcr.io/open-telemetry/demo:1.12.0-paymentservice
      imageID: ghcr.io/open-telemetry/demo@sha256:b0f13eef3abf4025772b09b793621acee8f05138f55d00a38aaab27b1e0d44c4
      lastState: {}
      name: paymentservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:19Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c7bnt
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.102.241
    podIPs:
    - ip: 192.168.102.241
    qosClass: Burstable
    startTime: "2024-11-30T15:48:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:51Z"
    generateName: opentelemetry-demo-productcatalogservice-6bc98644f9-
    labels:
      app.kubernetes.io/component: productcatalogservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-productcatalogservice
      opentelemetry.io/name: opentelemetry-demo-productcatalogservice
      pod-template-hash: 6bc98644f9
    name: opentelemetry-demo-productcatalogservice-6bc98644f9-8mhc8
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-productcatalogservice-6bc98644f9
      uid: 434b24ee-6698-4b4a-beb8-1594fb59df01
    resourceVersion: "21971"
    uid: 5a0a9b5d-acf9-4b26-a486-ccf2b37e0b7d
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: PRODUCT_CATALOG_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-productcatalogservice
      imagePullPolicy: IfNotPresent
      name: productcatalogservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 20Mi
        requests:
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-26b7v
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-26b7v
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9b6af6c065577a8385d3b111100fd5d4583eb197ca0015c3814f3cc322ab9033
      image: ghcr.io/open-telemetry/demo:1.12.0-productcatalogservice
      imageID: ghcr.io/open-telemetry/demo@sha256:008b9b662289b3ab498358e38b28e6bdaf706bfbe601041dfc7962bdd1d222c3
      lastState: {}
      name: productcatalogservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:48:58Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-26b7v
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.1.121
    podIPs:
    - ip: 192.168.1.121
    qosClass: Burstable
    startTime: "2024-11-30T15:48:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: opentelemetry-demo-prometheus-server-57cd8f9d46-
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.55.1
      pod-template-hash: 57cd8f9d46
    name: opentelemetry-demo-prometheus-server-57cd8f9d46-p7gtj
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-prometheus-server-57cd8f9d46
      uid: d9eb7a9a-d25c-43c5-bd81-733766501727
    resourceVersion: "22336"
    uid: ad4c89a8-a95a-46c7-9231-943043f7bcf3
  spec:
    containers:
    - args:
      - --storage.tsdb.retention.time=15d
      - --config.file=/etc/config/prometheus.yml
      - --storage.tsdb.path=/data
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
      image: quay.io/prometheus/prometheus:v2.55.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/healthy
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 10
      name: prometheus-server
      ports:
      - containerPort: 9090
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 4
      resources:
        limits:
          memory: 300Mi
        requests:
          memory: 300Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
      - mountPath: /data
        name: storage-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tsfqz
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-97-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: opentelemetry-demo-prometheus-server
    serviceAccountName: opentelemetry-demo-prometheus-server
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: opentelemetry-demo-prometheus-server
      name: config-volume
    - emptyDir: {}
      name: storage-volume
    - name: kube-api-access-tsfqz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0189d32a6a6e2aecce03ac538b52b378acce6bb802367622c418240a790d2434
      image: quay.io/prometheus/prometheus:v2.55.1
      imageID: quay.io/prometheus/prometheus@sha256:2659f4c2ebb718e7695cb9b25ffa7d6be64db013daba13e05c875451cf51b0d3
      lastState: {}
      name: prometheus-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:32Z"
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
      - mountPath: /data
        name: storage-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tsfqz
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.97.67
    hostIPs:
    - ip: 192.168.97.67
    phase: Running
    podIP: 192.168.113.220
    podIPs:
    - ip: 192.168.113.220
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:51Z"
    generateName: opentelemetry-demo-quoteservice-5658c58fd7-
    labels:
      app.kubernetes.io/component: quoteservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-quoteservice
      opentelemetry.io/name: opentelemetry-demo-quoteservice
      pod-template-hash: 5658c58fd7
    name: opentelemetry-demo-quoteservice-5658c58fd7-stsvn
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-quoteservice-5658c58fd7
      uid: 0ed0f2c3-c802-4af4-b46c-668e99bb3c0f
    resourceVersion: "22136"
    uid: f513cd02-7359-4942-be54-149d31d19281
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: QUOTE_SERVICE_PORT
        value: "8080"
      - name: OTEL_PHP_AUTOLOAD_ENABLED
        value: "true"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-quoteservice
      imagePullPolicy: IfNotPresent
      name: quoteservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 40Mi
        requests:
          memory: 40Mi
      securityContext:
        runAsGroup: 33
        runAsNonRoot: true
        runAsUser: 33
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jhcv6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-jhcv6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://28c30335c56e8fa8700395152e558ca42c3a89c637cde1db8293e4c0df24b704
      image: ghcr.io/open-telemetry/demo:1.12.0-quoteservice
      imageID: ghcr.io/open-telemetry/demo@sha256:87eb325d306f972722dae536b45857cb5a5dcde0781f093e882be0e5b8313d9e
      lastState: {}
      name: quoteservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:25Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jhcv6
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.26.97
    podIPs:
    - ip: 192.168.26.97
    qosClass: Burstable
    startTime: "2024-11-30T15:48:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:51Z"
    generateName: opentelemetry-demo-recommendationservice-6f576fd574-
    labels:
      app.kubernetes.io/component: recommendationservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-recommendationservice
      opentelemetry.io/name: opentelemetry-demo-recommendationservice
      pod-template-hash: 6f576fd574
    name: opentelemetry-demo-recommendationservice-6f576fd574-7fdxg
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-recommendationservice-6f576fd574
      uid: b20edbf5-1348-4ff9-8af3-ace43c5c3e49
    resourceVersion: "22105"
    uid: ed3d9cf3-db1e-44fa-a4a0-482e5dac13cc
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: RECOMMENDATION_SERVICE_PORT
        value: "8080"
      - name: PRODUCT_CATALOG_SERVICE_ADDR
        value: opentelemetry-demo-productcatalogservice:8080
      - name: OTEL_PYTHON_LOG_CORRELATION
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: FLAGD_HOST
        value: opentelemetry-demo-flagd
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-recommendationservice
      imagePullPolicy: IfNotPresent
      name: recommendationservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 500Mi
        requests:
          memory: 500Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8rfxm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-8rfxm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:21Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d86a853222def7c675ab9c261bd669225229ce5d6ff8a20718b5f91d04851030
      image: ghcr.io/open-telemetry/demo:1.12.0-recommendationservice
      imageID: ghcr.io/open-telemetry/demo@sha256:b294a4278407716451b43758d89a952941f750ba2972d4a99d041c918233c58b
      lastState: {}
      name: recommendationservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:20Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8rfxm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.12.191
    podIPs:
    - ip: 192.168.12.191
    qosClass: Burstable
    startTime: "2024-11-30T15:48:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:51Z"
    generateName: opentelemetry-demo-shippingservice-fcfc7765-
    labels:
      app.kubernetes.io/component: shippingservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-shippingservice
      opentelemetry.io/name: opentelemetry-demo-shippingservice
      pod-template-hash: fcfc7765
    name: opentelemetry-demo-shippingservice-fcfc7765-gqwfx
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-shippingservice-fcfc7765
      uid: c285c663-7db7-48ff-91fa-42bb3a8f9116
    resourceVersion: "22059"
    uid: 52228254-ed73-4f66-915c-880c7d007d5d
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: SHIPPING_SERVICE_PORT
        value: "8080"
      - name: QUOTE_SERVICE_ADDR
        value: http://opentelemetry-demo-quoteservice:8080
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4317
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: ghcr.io/open-telemetry/demo:1.12.0-shippingservice
      imagePullPolicy: IfNotPresent
      name: shippingservice
      ports:
      - containerPort: 8080
        name: service
        protocol: TCP
      resources:
        limits:
          memory: 20Mi
        requests:
          memory: 20Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gxrp6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-gxrp6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:17Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0129a5840eeb486b5f3ec8c5a4669cc74cb53c8134b0a1ea9f56033fe19a389a
      image: ghcr.io/open-telemetry/demo:1.12.0-shippingservice
      imageID: ghcr.io/open-telemetry/demo@sha256:a3ca4c02a5df456a8cfcf80f9bb5400ccb47c0d2f478e3a0e8472ce0753fccf0
      lastState: {}
      name: shippingservice
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:16Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gxrp6
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.0.182
    podIPs:
    - ip: 192.168.0.182
    qosClass: Burstable
    startTime: "2024-11-30T15:48:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-30T15:48:51Z"
    generateName: opentelemetry-demo-valkey-68b4cb4498-
    labels:
      app.kubernetes.io/component: valkey
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-valkey
      opentelemetry.io/name: opentelemetry-demo-valkey
      pod-template-hash: 68b4cb4498
    name: opentelemetry-demo-valkey-68b4cb4498-5t5zm
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: opentelemetry-demo-valkey-68b4cb4498
      uid: 9ce590bc-a34b-4f8e-9405-784a4ecdcaa8
    resourceVersion: "22110"
    uid: 662fed05-c419-4cf5-90ba-196acd4504de
  spec:
    containers:
    - env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['app.kubernetes.io/component']
      - name: OTEL_COLLECTOR_NAME
        value: opentelemetry-demo-otelcol
      - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
        value: cumulative
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
      image: valkey/valkey:7.2-alpine
      imagePullPolicy: IfNotPresent
      name: valkey
      ports:
      - containerPort: 6379
        name: valkey
        protocol: TCP
      resources:
        limits:
          memory: 20Mi
        requests:
          memory: 20Mi
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 999
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vrbbm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: opentelemetry-demo
    serviceAccountName: opentelemetry-demo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-vrbbm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:21Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://36aff9e78fcbfe5f92bca4cf39efc07c4728e94bf826c40d2d969442916a0b58
      image: docker.io/valkey/valkey:7.2-alpine
      imageID: docker.io/valkey/valkey@sha256:248fc049c66ac08a7a137b592cc6206bdf400ee2a021d58183ce88102f6e6ddd
      lastState: {}
      name: valkey
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:20Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vrbbm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    phase: Running
    podIP: 192.168.19.173
    podIPs:
    - ip: 192.168.19.173
    qosClass: Burstable
    startTime: "2024-11-30T15:48:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      configchecksum: e8c450687c20323f6f710672deb70783c1872772b09c7e40d93ae72e602bec3
    creationTimestamp: "2024-11-30T15:48:49Z"
    generateName: otel-demo-opensearch-
    labels:
      app.kubernetes.io/component: otel-demo-opensearch
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/version: 2.18.0
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: otel-demo-opensearch-f57db845c
      statefulset.kubernetes.io/pod-name: otel-demo-opensearch-0
    name: otel-demo-opensearch-0
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: otel-demo-opensearch
      uid: 983c6e7d-3dbb-4ca4-8f9a-c5c9c781e9a0
    resourceVersion: "22403"
    uid: 5c95a060-4daa-4d4a-86ef-d6737ba429cb
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - opentelemetry-demo
              - key: app.kubernetes.io/name
                operator: In
                values:
                - opensearch
            topologyKey: kubernetes.io/hostname
          weight: 1
    automountServiceAccountToken: false
    containers:
    - env:
      - name: node.name
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: discovery.seed_hosts
        value: opensearch-cluster-master-headless
      - name: cluster.name
        value: demo-cluster
      - name: network.host
        value: 0.0.0.0
      - name: OPENSEARCH_JAVA_OPTS
        value: -Xms300m -Xmx300m
      - name: node.roles
        value: master,ingest,data,remote_cluster_client,
      - name: discovery.type
        value: single-node
      - name: bootstrap.memory_lock
        value: "true"
      - name: DISABLE_INSTALL_DEMO_CONFIG
        value: "true"
      - name: DISABLE_SECURITY_PLUGIN
        value: "true"
      image: opensearchproject/opensearch:2.18.0
      imagePullPolicy: IfNotPresent
      name: opensearch
      ports:
      - containerPort: 9200
        name: http
        protocol: TCP
      - containerPort: 9300
        name: transport
        protocol: TCP
      - containerPort: 9600
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        periodSeconds: 5
        successThreshold: 1
        tcpSocket:
          port: 9200
        timeoutSeconds: 3
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: "1"
          memory: 100Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      startupProbe:
        failureThreshold: 30
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        tcpSocket:
          port: 9200
        timeoutSeconds: 3
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/opensearch/config/opensearch.yml
        name: config-emptydir
        subPath: opensearch.yml
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: otel-demo-opensearch-0
    initContainers:
    - command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash
        cp -r /tmp/configfolder/*  /tmp/config/
      image: opensearchproject/opensearch:2.18.0
      imagePullPolicy: IfNotPresent
      name: configfile
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/config/
        name: config-emptydir
      - mountPath: /tmp/configfolder/opensearch.yml
        name: config
        subPath: opensearch.yml
    nodeName: ip-192-168-1-142.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount: default
    serviceAccountName: default
    subdomain: otel-demo-opensearch-headless
    terminationGracePeriodSeconds: 120
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: otel-demo-opensearch-config
      name: config
    - emptyDir: {}
      name: config-emptydir
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:42Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:49:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:50:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-30T15:48:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://74f478ca70cbfdca0c5a598d07bbd7dd958eb7708e2a7c1a0c53d4ab403d5da8
      image: docker.io/opensearchproject/opensearch:2.18.0
      imageID: docker.io/opensearchproject/opensearch@sha256:8a354092666b1a47f0172c9c11ed5d6591f7b51843f2f1cebfdcf91032c34bb7
      lastState: {}
      name: opensearch
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-11-30T15:49:46Z"
      volumeMounts:
      - mountPath: /usr/share/opensearch/config/opensearch.yml
        name: config-emptydir
    hostIP: 192.168.1.142
    hostIPs:
    - ip: 192.168.1.142
    initContainerStatuses:
    - containerID: containerd://b9a37a9dcca8a4282a564096d665c067639a433d0a3b9a365d2699f6b8e8b67c
      image: docker.io/opensearchproject/opensearch:2.18.0
      imageID: docker.io/opensearchproject/opensearch@sha256:8a354092666b1a47f0172c9c11ed5d6591f7b51843f2f1cebfdcf91032c34bb7
      lastState: {}
      name: configfile
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://b9a37a9dcca8a4282a564096d665c067639a433d0a3b9a365d2699f6b8e8b67c
          exitCode: 0
          finishedAt: "2024-11-30T15:49:42Z"
          reason: Completed
          startedAt: "2024-11-30T15:49:42Z"
      volumeMounts:
      - mountPath: /tmp/config/
        name: config-emptydir
      - mountPath: /tmp/configfolder/opensearch.yml
        name: config
    phase: Running
    podIP: 192.168.3.19
    podIPs:
    - ip: 192.168.3.19
    qosClass: Burstable
    startTime: "2024-11-30T15:48:49Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"adservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-adservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-adservice"},"name":"opentelemetry-demo-adservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-adservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: adservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-adservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-adservice
    name: opentelemetry-demo-adservice
    namespace: otel-demo
    resourceVersion: "21528"
    uid: b95e5045-aef4-4b4e-83dc-a839d12144ee
  spec:
    clusterIP: 10.100.34.69
    clusterIPs:
    - 10.100.34.69
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-adservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"cartservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-cartservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-cartservice"},"name":"opentelemetry-demo-cartservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-cartservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: cartservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-cartservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-cartservice
    name: opentelemetry-demo-cartservice
    namespace: otel-demo
    resourceVersion: "21532"
    uid: c9849f0a-8718-4859-b372-17847a5b2c81
  spec:
    clusterIP: 10.100.115.70
    clusterIPs:
    - 10.100.115.70
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-cartservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"checkoutservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-checkoutservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-checkoutservice"},"name":"opentelemetry-demo-checkoutservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-checkoutservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: checkoutservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-checkoutservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-checkoutservice
    name: opentelemetry-demo-checkoutservice
    namespace: otel-demo
    resourceVersion: "21536"
    uid: e475f4b7-98c8-4b93-9037-234c30496f99
  spec:
    clusterIP: 10.100.108.20
    clusterIPs:
    - 10.100.108.20
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-checkoutservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"currencyservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-currencyservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-currencyservice"},"name":"opentelemetry-demo-currencyservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-currencyservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: currencyservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-currencyservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-currencyservice
    name: opentelemetry-demo-currencyservice
    namespace: otel-demo
    resourceVersion: "21540"
    uid: f93d878a-9a4c-4218-917b-4026ee230342
  spec:
    clusterIP: 10.100.24.136
    clusterIPs:
    - 10.100.24.136
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-currencyservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"emailservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-emailservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-emailservice"},"name":"opentelemetry-demo-emailservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-emailservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: emailservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-emailservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-emailservice
    name: opentelemetry-demo-emailservice
    namespace: otel-demo
    resourceVersion: "21544"
    uid: a66ad6dc-10e2-4481-be89-cb862a5c3f9c
  spec:
    clusterIP: 10.100.84.51
    clusterIPs:
    - 10.100.84.51
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-emailservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"flagd","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-flagd","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-flagd"},"name":"opentelemetry-demo-flagd","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8013,"targetPort":8013},{"name":"tcp-service-0","port":4000,"targetPort":4000}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-flagd"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: flagd
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-flagd
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-flagd
    name: opentelemetry-demo-flagd
    namespace: otel-demo
    resourceVersion: "21548"
    uid: 2acb068a-05f9-429a-9807-09013af984ce
  spec:
    clusterIP: 10.100.57.201
    clusterIPs:
    - 10.100.57.201
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8013
      protocol: TCP
      targetPort: 8013
    - name: tcp-service-0
      port: 4000
      protocol: TCP
      targetPort: 4000
    selector:
      opentelemetry.io/name: opentelemetry-demo-flagd
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"frontend","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frontend","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-frontend"},"name":"opentelemetry-demo-frontend","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-frontend"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontend
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-frontend
    name: opentelemetry-demo-frontend
    namespace: otel-demo
    resourceVersion: "21552"
    uid: 8f83c5db-6b51-4be0-b367-ef71738e5acc
  spec:
    clusterIP: 10.100.240.81
    clusterIPs:
    - 10.100.240.81
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-frontend
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"frontendproxy","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frontendproxy","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-frontendproxy"},"name":"opentelemetry-demo-frontendproxy","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-frontendproxy"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: frontendproxy
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontendproxy
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-frontendproxy
    name: opentelemetry-demo-frontendproxy
    namespace: otel-demo
    resourceVersion: "21556"
    uid: 8cccc335-4d28-4df1-93cb-06ef90a0ef29
  spec:
    clusterIP: 10.100.202.198
    clusterIPs:
    - 10.100.202.198
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-frontendproxy
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"grafana","app.kubernetes.io/version":"11.3.0"},"name":"opentelemetry-demo-grafana","namespace":"otel-demo"},"spec":{"ports":[{"name":"service","port":80,"protocol":"TCP","targetPort":3000}],"selector":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"grafana"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:47Z"
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.3.0
    name: opentelemetry-demo-grafana
    namespace: otel-demo
    resourceVersion: "21500"
    uid: 9d7a8e6a-4964-4932-bed9-1ef0835a789b
  spec:
    clusterIP: 10.100.60.132
    clusterIPs:
    - 10.100.60.132
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: grafana
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"imageprovider","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-imageprovider","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-imageprovider"},"name":"opentelemetry-demo-imageprovider","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8081,"targetPort":8081}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-imageprovider"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: imageprovider
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-imageprovider
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-imageprovider
    name: opentelemetry-demo-imageprovider
    namespace: otel-demo
    resourceVersion: "21560"
    uid: ec901092-4ef8-4f93-83c1-d69b0d3023b3
  spec:
    clusterIP: 10.100.168.108
    clusterIPs:
    - 10.100.168.108
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      opentelemetry.io/name: opentelemetry-demo-imageprovider
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"service-agent","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger","app.kubernetes.io/version":"1.53.0"},"name":"opentelemetry-demo-jaeger-agent","namespace":"otel-demo"},"spec":{"clusterIP":"None","ports":[{"name":"zk-compact-trft","port":5775,"protocol":"UDP","targetPort":0},{"name":"config-rest","port":5778,"targetPort":0},{"name":"jg-compact-trft","port":6831,"protocol":"UDP","targetPort":0},{"name":"jg-binary-trft","port":6832,"protocol":"UDP","targetPort":0}],"selector":{"app.kubernetes.io/component":"all-in-one","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger"}}}
    creationTimestamp: "2024-11-30T15:48:47Z"
    labels:
      app.kubernetes.io/component: service-agent
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/version: 1.53.0
    name: opentelemetry-demo-jaeger-agent
    namespace: otel-demo
    resourceVersion: "21501"
    uid: e2bd288d-5456-44ba-94c0-8bba499d771a
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: zk-compact-trft
      port: 5775
      protocol: UDP
      targetPort: 5775
    - name: config-rest
      port: 5778
      protocol: TCP
      targetPort: 5778
    - name: jg-compact-trft
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: jg-binary-trft
      port: 6832
      protocol: UDP
      targetPort: 6832
    selector:
      app.kubernetes.io/component: all-in-one
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"service-collector","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger","app.kubernetes.io/version":"1.53.0"},"name":"opentelemetry-demo-jaeger-collector","namespace":"otel-demo"},"spec":{"clusterIP":"None","ports":[{"appProtocol":"http","name":"http-zipkin","port":9411,"targetPort":0},{"appProtocol":"grpc","name":"grpc-http","port":14250,"targetPort":0},{"name":"c-tchan-trft","port":14267,"targetPort":0},{"appProtocol":"http","name":"http-c-binary-trft","port":14268,"targetPort":0},{"appProtocol":"grpc","name":"otlp-grpc","port":4317,"targetPort":0},{"appProtocol":"http","name":"otlp-http","port":4318,"targetPort":0}],"selector":{"app.kubernetes.io/component":"all-in-one","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger"}}}
    creationTimestamp: "2024-11-30T15:48:47Z"
    labels:
      app.kubernetes.io/component: service-collector
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/version: 1.53.0
    name: opentelemetry-demo-jaeger-collector
    namespace: otel-demo
    resourceVersion: "21506"
    uid: eda4a8a8-2c61-43e9-b02b-9057bff71480
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    - appProtocol: grpc
      name: grpc-http
      port: 14250
      protocol: TCP
      targetPort: 14250
    - name: c-tchan-trft
      port: 14267
      protocol: TCP
      targetPort: 14267
    - appProtocol: http
      name: http-c-binary-trft
      port: 14268
      protocol: TCP
      targetPort: 14268
    - appProtocol: grpc
      name: otlp-grpc
      port: 4317
      protocol: TCP
      targetPort: 4317
    - appProtocol: http
      name: otlp-http
      port: 4318
      protocol: TCP
      targetPort: 4318
    selector:
      app.kubernetes.io/component: all-in-one
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"service-query","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger","app.kubernetes.io/version":"1.53.0"},"name":"opentelemetry-demo-jaeger-query","namespace":"otel-demo"},"spec":{"clusterIP":"None","ports":[{"name":"http-query","port":16686,"targetPort":16686},{"name":"grpc-query","port":16685,"targetPort":16685}],"selector":{"app.kubernetes.io/component":"all-in-one","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger"}}}
    creationTimestamp: "2024-11-30T15:48:47Z"
    labels:
      app.kubernetes.io/component: service-query
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/version: 1.53.0
    name: opentelemetry-demo-jaeger-query
    namespace: otel-demo
    resourceVersion: "21509"
    uid: 64dd8c75-4cca-4ce1-ba44-9e561520d5c7
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-query
      port: 16686
      protocol: TCP
      targetPort: 16686
    - name: grpc-query
      port: 16685
      protocol: TCP
      targetPort: 16685
    selector:
      app.kubernetes.io/component: all-in-one
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"kafka","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-kafka","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-kafka"},"name":"opentelemetry-demo-kafka","namespace":"otel-demo"},"spec":{"ports":[{"name":"plaintext","port":9092,"targetPort":9092},{"name":"controller","port":9093,"targetPort":9093}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-kafka"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: kafka
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-kafka
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-kafka
    name: opentelemetry-demo-kafka
    namespace: otel-demo
    resourceVersion: "21564"
    uid: ca41df3d-0899-4101-8bcc-e379ab97d351
  spec:
    clusterIP: 10.100.54.235
    clusterIPs:
    - 10.100.54.235
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: plaintext
      port: 9092
      protocol: TCP
      targetPort: 9092
    - name: controller
      port: 9093
      protocol: TCP
      targetPort: 9093
    selector:
      opentelemetry.io/name: opentelemetry-demo-kafka
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"loadgenerator","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-loadgenerator","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-loadgenerator"},"name":"opentelemetry-demo-loadgenerator","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8089,"targetPort":8089}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-loadgenerator"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: loadgenerator
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-loadgenerator
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-loadgenerator
    name: opentelemetry-demo-loadgenerator
    namespace: otel-demo
    resourceVersion: "21568"
    uid: cd6c23ec-527f-45df-8b9a-f8a0e572fc99
  spec:
    clusterIP: 10.100.210.150
    clusterIPs:
    - 10.100.210.150
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8089
      protocol: TCP
      targetPort: 8089
    selector:
      opentelemetry.io/name: opentelemetry-demo-loadgenerator
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"otelcol","app.kubernetes.io/version":"0.113.0","component":"standalone-collector"},"name":"opentelemetry-demo-otelcol","namespace":"otel-demo"},"spec":{"internalTrafficPolicy":"Cluster","ports":[{"name":"jaeger-compact","port":6831,"protocol":"UDP","targetPort":6831},{"name":"jaeger-grpc","port":14250,"protocol":"TCP","targetPort":14250},{"name":"jaeger-thrift","port":14268,"protocol":"TCP","targetPort":14268},{"name":"metrics","port":8888,"protocol":"TCP","targetPort":8888},{"appProtocol":"grpc","name":"otlp","port":4317,"protocol":"TCP","targetPort":4317},{"name":"otlp-http","port":4318,"protocol":"TCP","targetPort":4318},{"name":"prometheus","port":9464,"protocol":"TCP","targetPort":9464},{"name":"zipkin","port":9411,"protocol":"TCP","targetPort":9411}],"selector":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"otelcol","component":"standalone-collector"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:47Z"
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/version: 0.113.0
      component: standalone-collector
    name: opentelemetry-demo-otelcol
    namespace: otel-demo
    resourceVersion: "21520"
    uid: 724ad0de-3818-45c5-9bd0-a9accac89a9a
  spec:
    clusterIP: 10.100.54.80
    clusterIPs:
    - 10.100.54.80
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: jaeger-compact
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: jaeger-grpc
      port: 14250
      protocol: TCP
      targetPort: 14250
    - name: jaeger-thrift
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: metrics
      port: 8888
      protocol: TCP
      targetPort: 8888
    - appProtocol: grpc
      name: otlp
      port: 4317
      protocol: TCP
      targetPort: 4317
    - name: otlp-http
      port: 4318
      protocol: TCP
      targetPort: 4318
    - name: prometheus
      port: 9464
      protocol: TCP
      targetPort: 9464
    - name: zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    selector:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: otelcol
      component: standalone-collector
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"paymentservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-paymentservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-paymentservice"},"name":"opentelemetry-demo-paymentservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-paymentservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: paymentservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-paymentservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-paymentservice
    name: opentelemetry-demo-paymentservice
    namespace: otel-demo
    resourceVersion: "21572"
    uid: 40eec5fc-6e72-4584-a300-8a4a6340e991
  spec:
    clusterIP: 10.100.188.206
    clusterIPs:
    - 10.100.188.206
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-paymentservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"productcatalogservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-productcatalogservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-productcatalogservice"},"name":"opentelemetry-demo-productcatalogservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-productcatalogservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: productcatalogservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-productcatalogservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-productcatalogservice
    name: opentelemetry-demo-productcatalogservice
    namespace: otel-demo
    resourceVersion: "21576"
    uid: 3598daba-8403-481c-92bd-2f5ffbada543
  spec:
    clusterIP: 10.100.79.197
    clusterIPs:
    - 10.100.79.197
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-productcatalogservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"prometheus","app.kubernetes.io/part-of":"prometheus","app.kubernetes.io/version":"v2.55.1"},"name":"opentelemetry-demo-prometheus-server","namespace":"otel-demo"},"spec":{"ports":[{"name":"http","port":9090,"protocol":"TCP","targetPort":9090}],"selector":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"prometheus"},"sessionAffinity":"None","type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.55.1
    name: opentelemetry-demo-prometheus-server
    namespace: otel-demo
    resourceVersion: "21524"
    uid: d985d68f-a989-46d2-be9c-9434aa9381a1
  spec:
    clusterIP: 10.100.48.225
    clusterIPs:
    - 10.100.48.225
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"quoteservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-quoteservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-quoteservice"},"name":"opentelemetry-demo-quoteservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-quoteservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: quoteservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-quoteservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-quoteservice
    name: opentelemetry-demo-quoteservice
    namespace: otel-demo
    resourceVersion: "21578"
    uid: f3918e1c-f82f-4c71-aa55-45af06ecd5b9
  spec:
    clusterIP: 10.100.27.50
    clusterIPs:
    - 10.100.27.50
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-quoteservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"recommendationservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-recommendationservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-recommendationservice"},"name":"opentelemetry-demo-recommendationservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-recommendationservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: recommendationservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-recommendationservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-recommendationservice
    name: opentelemetry-demo-recommendationservice
    namespace: otel-demo
    resourceVersion: "21580"
    uid: 2c111dde-ae4e-4ccb-98ac-09dafac54283
  spec:
    clusterIP: 10.100.249.62
    clusterIPs:
    - 10.100.249.62
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-recommendationservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"shippingservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-shippingservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-shippingservice"},"name":"opentelemetry-demo-shippingservice","namespace":"otel-demo"},"spec":{"ports":[{"name":"tcp-service","port":8080,"targetPort":8080}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-shippingservice"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: shippingservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-shippingservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-shippingservice
    name: opentelemetry-demo-shippingservice
    namespace: otel-demo
    resourceVersion: "21586"
    uid: 3a7e4e1a-32d9-42c1-9b04-31702d864e7c
  spec:
    clusterIP: 10.100.255.29
    clusterIPs:
    - 10.100.255.29
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-service
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      opentelemetry.io/name: opentelemetry-demo-shippingservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"valkey","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-valkey","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-valkey"},"name":"opentelemetry-demo-valkey","namespace":"otel-demo"},"spec":{"ports":[{"name":"valkey","port":6379,"targetPort":6379}],"selector":{"opentelemetry.io/name":"opentelemetry-demo-valkey"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    labels:
      app.kubernetes.io/component: valkey
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-valkey
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-valkey
    name: opentelemetry-demo-valkey
    namespace: otel-demo
    resourceVersion: "21590"
    uid: 0c8ab24e-81b2-460d-bb0d-16b64ae89d8f
  spec:
    clusterIP: 10.100.45.45
    clusterIPs:
    - 10.100.45.45
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: valkey
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      opentelemetry.io/name: opentelemetry-demo-valkey
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"otel-demo-opensearch","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opensearch","app.kubernetes.io/version":"2.18.0"},"name":"otel-demo-opensearch","namespace":"otel-demo"},"spec":{"ports":[{"name":"http","port":9200,"protocol":"TCP"},{"name":"transport","port":9300,"protocol":"TCP"},{"name":"metrics","port":9600,"protocol":"TCP"}],"selector":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opensearch"},"type":"ClusterIP"}}
    creationTimestamp: "2024-11-30T15:48:47Z"
    labels:
      app.kubernetes.io/component: otel-demo-opensearch
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/version: 2.18.0
    name: otel-demo-opensearch
    namespace: otel-demo
    resourceVersion: "21513"
    uid: d2a1f944-8ee0-4209-80c1-d0cc1117c16b
  spec:
    clusterIP: 10.100.110.231
    clusterIPs:
    - 10.100.110.231
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: transport
      port: 9300
      protocol: TCP
      targetPort: 9300
    - name: metrics
      port: 9600
      protocol: TCP
      targetPort: 9600
    selector:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opensearch
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"service.alpha.kubernetes.io/tolerate-unready-endpoints":"true"},"labels":{"app.kubernetes.io/component":"otel-demo-opensearch","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opensearch","app.kubernetes.io/version":"2.18.0"},"name":"otel-demo-opensearch-headless","namespace":"otel-demo"},"spec":{"clusterIP":"None","ports":[{"name":"http","port":9200},{"name":"transport","port":9300},{"name":"metrics","port":9600}],"publishNotReadyAddresses":true,"selector":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opensearch"}}}
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    creationTimestamp: "2024-11-30T15:48:47Z"
    labels:
      app.kubernetes.io/component: otel-demo-opensearch
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/version: 2.18.0
    name: otel-demo-opensearch-headless
    namespace: otel-demo
    resourceVersion: "21516"
    uid: f231e7eb-ded8-4dd3-b9ab-6f03c61f2e82
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: transport
      port: 9300
      protocol: TCP
      targetPort: 9300
    - name: metrics
      port: 9600
      protocol: TCP
      targetPort: 9600
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opensearch
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"accountingservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-accountingservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-accountingservice"},"name":"opentelemetry-demo-accountingservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-accountingservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"accountingservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-accountingservice","opentelemetry.io/name":"opentelemetry-demo-accountingservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"KAFKA_SERVICE_ADDR","value":"opentelemetry-demo-kafka:9092"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-accountingservice","imagePullPolicy":"IfNotPresent","name":"accountingservice","resources":{"limits":{"memory":"120Mi"}},"volumeMounts":null}],"initContainers":[{"command":["sh","-c","until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for kafka; sleep 2; done;"],"image":"busybox:latest","name":"wait-for-kafka"}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: accountingservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-accountingservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-accountingservice
    name: opentelemetry-demo-accountingservice
    namespace: otel-demo
    resourceVersion: "22434"
    uid: 558526fc-08f8-4590-b812-81a0b35567cc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-accountingservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: accountingservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-accountingservice
          opentelemetry.io/name: opentelemetry-demo-accountingservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: opentelemetry-demo-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-accountingservice
          imagePullPolicy: IfNotPresent
          name: accountingservice
          resources:
            limits:
              memory: 120Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for
            kafka; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:50:23Z"
      lastUpdateTime: "2024-11-30T15:50:23Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:50:23Z"
      message: ReplicaSet "opentelemetry-demo-accountingservice-8555cb59fb" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"adservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-adservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-adservice"},"name":"opentelemetry-demo-adservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-adservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"adservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-adservice","opentelemetry.io/name":"opentelemetry-demo-adservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"AD_SERVICE_PORT","value":"8080"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4318"},{"name":"OTEL_LOGS_EXPORTER","value":"otlp"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-adservice","imagePullPolicy":"IfNotPresent","name":"adservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"300Mi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: adservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-adservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-adservice
    name: opentelemetry-demo-adservice
    namespace: otel-demo
    resourceVersion: "22185"
    uid: 02abcb01-35db-4e97-962d-b49366a1ab68
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-adservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: adservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-adservice
          opentelemetry.io/name: opentelemetry-demo-adservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: AD_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_LOGS_EXPORTER
            value: otlp
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-adservice
          imagePullPolicy: IfNotPresent
          name: adservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:33Z"
      lastUpdateTime: "2024-11-30T15:49:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:33Z"
      message: ReplicaSet "opentelemetry-demo-adservice-5df4bf56d6" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"cartservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-cartservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-cartservice"},"name":"opentelemetry-demo-cartservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-cartservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"cartservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-cartservice","opentelemetry.io/name":"opentelemetry-demo-cartservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"CART_SERVICE_PORT","value":"8080"},{"name":"ASPNETCORE_URLS","value":"http://*:$(CART_SERVICE_PORT)"},{"name":"VALKEY_ADDR","value":"opentelemetry-demo-valkey:6379"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-cartservice","imagePullPolicy":"IfNotPresent","name":"cartservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"160Mi"}},"volumeMounts":null}],"initContainers":[{"command":["sh","-c","until nc -z -v -w30 opentelemetry-demo-valkey 6379; do echo waiting for valkey; sleep 2; done;"],"image":"busybox:latest","name":"wait-for-valkey"}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: cartservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-cartservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-cartservice
    name: opentelemetry-demo-cartservice
    namespace: otel-demo
    resourceVersion: "22273"
    uid: 0e43bdde-b99a-4807-9206-3a9d3633bb4d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-cartservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cartservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-cartservice
          opentelemetry.io/name: opentelemetry-demo-cartservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CART_SERVICE_PORT
            value: "8080"
          - name: ASPNETCORE_URLS
            value: http://*:$(CART_SERVICE_PORT)
          - name: VALKEY_ADDR
            value: opentelemetry-demo-valkey:6379
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-cartservice
          imagePullPolicy: IfNotPresent
          name: cartservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 160Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-valkey 6379; do echo waiting for
            valkey; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-valkey
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:45Z"
      lastUpdateTime: "2024-11-30T15:49:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:45Z"
      message: ReplicaSet "opentelemetry-demo-cartservice-694df79ff7" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"checkoutservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-checkoutservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-checkoutservice"},"name":"opentelemetry-demo-checkoutservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-checkoutservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"checkoutservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-checkoutservice","opentelemetry.io/name":"opentelemetry-demo-checkoutservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"CHECKOUT_SERVICE_PORT","value":"8080"},{"name":"CART_SERVICE_ADDR","value":"opentelemetry-demo-cartservice:8080"},{"name":"CURRENCY_SERVICE_ADDR","value":"opentelemetry-demo-currencyservice:8080"},{"name":"EMAIL_SERVICE_ADDR","value":"http://opentelemetry-demo-emailservice:8080"},{"name":"PAYMENT_SERVICE_ADDR","value":"opentelemetry-demo-paymentservice:8080"},{"name":"PRODUCT_CATALOG_SERVICE_ADDR","value":"opentelemetry-demo-productcatalogservice:8080"},{"name":"SHIPPING_SERVICE_ADDR","value":"opentelemetry-demo-shippingservice:8080"},{"name":"KAFKA_SERVICE_ADDR","value":"opentelemetry-demo-kafka:9092"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-checkoutservice","imagePullPolicy":"IfNotPresent","name":"checkoutservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"20Mi"}},"volumeMounts":null}],"initContainers":[{"command":["sh","-c","until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for kafka; sleep 2; done;"],"image":"busybox:latest","name":"wait-for-kafka"}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: checkoutservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-checkoutservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-checkoutservice
    name: opentelemetry-demo-checkoutservice
    namespace: otel-demo
    resourceVersion: "22419"
    uid: b05c445a-6412-4bfd-89ec-cea8b13f769e
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-checkoutservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: checkoutservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-checkoutservice
          opentelemetry.io/name: opentelemetry-demo-checkoutservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CHECKOUT_SERVICE_PORT
            value: "8080"
          - name: CART_SERVICE_ADDR
            value: opentelemetry-demo-cartservice:8080
          - name: CURRENCY_SERVICE_ADDR
            value: opentelemetry-demo-currencyservice:8080
          - name: EMAIL_SERVICE_ADDR
            value: http://opentelemetry-demo-emailservice:8080
          - name: PAYMENT_SERVICE_ADDR
            value: opentelemetry-demo-paymentservice:8080
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: opentelemetry-demo-productcatalogservice:8080
          - name: SHIPPING_SERVICE_ADDR
            value: opentelemetry-demo-shippingservice:8080
          - name: KAFKA_SERVICE_ADDR
            value: opentelemetry-demo-kafka:9092
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-checkoutservice
          imagePullPolicy: IfNotPresent
          name: checkoutservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for
            kafka; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:50:20Z"
      lastUpdateTime: "2024-11-30T15:50:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:50:20Z"
      message: ReplicaSet "opentelemetry-demo-checkoutservice-744b6cdd6" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"currencyservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-currencyservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-currencyservice"},"name":"opentelemetry-demo-currencyservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-currencyservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"currencyservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-currencyservice","opentelemetry.io/name":"opentelemetry-demo-currencyservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"CURRENCY_SERVICE_PORT","value":"8080"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"VERSION","value":"1.12.0"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-currencyservice","imagePullPolicy":"IfNotPresent","name":"currencyservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"20Mi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: currencyservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-currencyservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-currencyservice
    name: opentelemetry-demo-currencyservice
    namespace: otel-demo
    resourceVersion: "22035"
    uid: e04a1923-e37a-4bfa-8d07-5627531323fa
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-currencyservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: currencyservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-currencyservice
          opentelemetry.io/name: opentelemetry-demo-currencyservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CURRENCY_SERVICE_PORT
            value: "8080"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: VERSION
            value: 1.12.0
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-currencyservice
          imagePullPolicy: IfNotPresent
          name: currencyservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:10Z"
      lastUpdateTime: "2024-11-30T15:49:10Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:10Z"
      message: ReplicaSet "opentelemetry-demo-currencyservice-6b8fcd9bd6" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"emailservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-emailservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-emailservice"},"name":"opentelemetry-demo-emailservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-emailservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"emailservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-emailservice","opentelemetry.io/name":"opentelemetry-demo-emailservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"EMAIL_SERVICE_PORT","value":"8080"},{"name":"APP_ENV","value":"production"},{"name":"OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4318/v1/traces"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-emailservice","imagePullPolicy":"IfNotPresent","name":"emailservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"100Mi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: emailservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-emailservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-emailservice
    name: opentelemetry-demo-emailservice
    namespace: otel-demo
    resourceVersion: "22190"
    uid: 1f7906fa-26da-4ddb-bd54-cb109c4773eb
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-emailservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: emailservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-emailservice
          opentelemetry.io/name: opentelemetry-demo-emailservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: EMAIL_SERVICE_PORT
            value: "8080"
          - name: APP_ENV
            value: production
          - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-emailservice
          imagePullPolicy: IfNotPresent
          name: emailservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:33Z"
      lastUpdateTime: "2024-11-30T15:49:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:33Z"
      message: ReplicaSet "opentelemetry-demo-emailservice-66d8476fdc" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"flagd","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-flagd","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-flagd"},"name":"opentelemetry-demo-flagd","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-flagd"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"flagd","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-flagd","opentelemetry.io/name":"opentelemetry-demo-flagd"}},"spec":{"containers":[{"command":["/flagd-build","start","--uri","file:./etc/flagd/demo.flagd.json"],"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"FLAGD_METRICS_EXPORTER","value":"otel"},{"name":"FLAGD_OTEL_COLLECTOR_URI","value":"$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-feature/flagd:v0.11.1","imagePullPolicy":"IfNotPresent","name":"flagd","ports":[{"containerPort":8013,"name":"service"}],"resources":{"limits":{"memory":"50Mi"}},"volumeMounts":[{"mountPath":"/etc/flagd","name":"config-rw"}]},{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"FLAGD_METRICS_EXPORTER","value":"otel"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-flagdui","imagePullPolicy":"IfNotPresent","name":"flagdui","ports":[{"containerPort":4000,"name":"service"}],"resources":{"limits":{"memory":"150Mi"}},"volumeMounts":[{"mountPath":"/app/data","name":"config-rw"}]}],"initContainers":[{"command":["sh","-c","cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json \u0026\u0026 cat /config-rw/demo.flagd.json"],"image":"busybox","name":"init-config","volumeMounts":[{"mountPath":"/config-ro","name":"config-ro"},{"mountPath":"/config-rw","name":"config-rw"}]}],"serviceAccountName":"opentelemetry-demo","volumes":[{"emptyDir":{},"name":"config-rw"},{"configMap":{"name":"opentelemetry-demo-flagd-config"},"name":"config-ro"}]}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: flagd
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-flagd
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-flagd
    name: opentelemetry-demo-flagd
    namespace: otel-demo
    resourceVersion: "22222"
    uid: 5911f5a3-ca00-44d4-a125-7dbc1aeb8037
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-flagd
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: flagd
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-flagd
          opentelemetry.io/name: opentelemetry-demo-flagd
      spec:
        containers:
        - command:
          - /flagd-build
          - start
          - --uri
          - file:./etc/flagd/demo.flagd.json
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: FLAGD_OTEL_COLLECTOR_URI
            value: $(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-feature/flagd:v0.11.1
          imagePullPolicy: IfNotPresent
          name: flagd
          ports:
          - containerPort: 8013
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/flagd
            name: config-rw
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-flagdui
          imagePullPolicy: IfNotPresent
          name: flagdui
          ports:
          - containerPort: 4000
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/data
            name: config-rw
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json
          image: busybox
          imagePullPolicy: Always
          name: init-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config-ro
            name: config-ro
          - mountPath: /config-rw
            name: config-rw
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: config-rw
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-flagd-config
          name: config-ro
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:37Z"
      lastUpdateTime: "2024-11-30T15:49:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:37Z"
      message: ReplicaSet "opentelemetry-demo-flagd-679866d767" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"frauddetectionservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frauddetectionservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-frauddetectionservice"},"name":"opentelemetry-demo-frauddetectionservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-frauddetectionservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"frauddetectionservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frauddetectionservice","opentelemetry.io/name":"opentelemetry-demo-frauddetectionservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"KAFKA_SERVICE_ADDR","value":"opentelemetry-demo-kafka:9092"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4318"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-frauddetectionservice","imagePullPolicy":"IfNotPresent","name":"frauddetectionservice","resources":{"limits":{"memory":"300Mi"}},"volumeMounts":null}],"initContainers":[{"command":["sh","-c","until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for kafka; sleep 2; done;"],"image":"busybox:latest","name":"wait-for-kafka"}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: frauddetectionservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frauddetectionservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
    name: opentelemetry-demo-frauddetectionservice
    namespace: otel-demo
    resourceVersion: "22460"
    uid: 8a2496a9-d304-425b-82e6-2d3ae6bb5e10
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: frauddetectionservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-frauddetectionservice
          opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: opentelemetry-demo-kafka:9092
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-frauddetectionservice
          imagePullPolicy: IfNotPresent
          name: frauddetectionservice
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for
            kafka; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:50:31Z"
      lastUpdateTime: "2024-11-30T15:50:31Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:50:31Z"
      message: ReplicaSet "opentelemetry-demo-frauddetectionservice-85d48f855f" has
        successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"frontend","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frontend","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-frontend"},"name":"opentelemetry-demo-frontend","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-frontend"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"frontend","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frontend","opentelemetry.io/name":"opentelemetry-demo-frontend"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"FRONTEND_PORT","value":"8080"},{"name":"FRONTEND_ADDR","value":":8080"},{"name":"AD_SERVICE_ADDR","value":"opentelemetry-demo-adservice:8080"},{"name":"CART_SERVICE_ADDR","value":"opentelemetry-demo-cartservice:8080"},{"name":"CHECKOUT_SERVICE_ADDR","value":"opentelemetry-demo-checkoutservice:8080"},{"name":"CURRENCY_SERVICE_ADDR","value":"opentelemetry-demo-currencyservice:8080"},{"name":"PRODUCT_CATALOG_SERVICE_ADDR","value":"opentelemetry-demo-productcatalogservice:8080"},{"name":"RECOMMENDATION_SERVICE_ADDR","value":"opentelemetry-demo-recommendationservice:8080"},{"name":"SHIPPING_SERVICE_ADDR","value":"opentelemetry-demo-shippingservice:8080"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_COLLECTOR_HOST","value":"$(OTEL_COLLECTOR_NAME)"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"WEB_OTEL_SERVICE_NAME","value":"frontend-web"},{"name":"PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","value":"http://localhost:8080/otlp-http/v1/traces"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-frontend","imagePullPolicy":"IfNotPresent","name":"frontend","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"250Mi"}},"securityContext":{"runAsGroup":1001,"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontend
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-frontend
    name: opentelemetry-demo-frontend
    namespace: otel-demo
    resourceVersion: "22346"
    uid: 9068de23-cda9-419f-be70-7fb6478e00ad
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-frontend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: frontend
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-frontend
          opentelemetry.io/name: opentelemetry-demo-frontend
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FRONTEND_PORT
            value: "8080"
          - name: FRONTEND_ADDR
            value: :8080
          - name: AD_SERVICE_ADDR
            value: opentelemetry-demo-adservice:8080
          - name: CART_SERVICE_ADDR
            value: opentelemetry-demo-cartservice:8080
          - name: CHECKOUT_SERVICE_ADDR
            value: opentelemetry-demo-checkoutservice:8080
          - name: CURRENCY_SERVICE_ADDR
            value: opentelemetry-demo-currencyservice:8080
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: opentelemetry-demo-productcatalogservice:8080
          - name: RECOMMENDATION_SERVICE_ADDR
            value: opentelemetry-demo-recommendationservice:8080
          - name: SHIPPING_SERVICE_ADDR
            value: opentelemetry-demo-shippingservice:8080
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: WEB_OTEL_SERVICE_NAME
            value: frontend-web
          - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://localhost:8080/otlp-http/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-frontend
          imagePullPolicy: IfNotPresent
          name: frontend
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 250Mi
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:50:04Z"
      lastUpdateTime: "2024-11-30T15:50:04Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:49Z"
      lastUpdateTime: "2024-11-30T15:50:04Z"
      message: ReplicaSet "opentelemetry-demo-frontend-59bccd8fdb" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"frontendproxy","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frontendproxy","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-frontendproxy"},"name":"opentelemetry-demo-frontendproxy","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-frontendproxy"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"frontendproxy","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-frontendproxy","opentelemetry.io/name":"opentelemetry-demo-frontendproxy"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"ENVOY_PORT","value":"8080"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"FLAGD_UI_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_UI_PORT","value":"4000"},{"name":"FRONTEND_HOST","value":"opentelemetry-demo-frontend"},{"name":"FRONTEND_PORT","value":"8080"},{"name":"GRAFANA_SERVICE_HOST","value":"opentelemetry-demo-grafana"},{"name":"GRAFANA_SERVICE_PORT","value":"80"},{"name":"IMAGE_PROVIDER_HOST","value":"opentelemetry-demo-imageprovider"},{"name":"IMAGE_PROVIDER_PORT","value":"8081"},{"name":"JAEGER_SERVICE_HOST","value":"opentelemetry-demo-jaeger-query"},{"name":"JAEGER_SERVICE_PORT","value":"16686"},{"name":"LOCUST_WEB_HOST","value":"opentelemetry-demo-loadgenerator"},{"name":"LOCUST_WEB_PORT","value":"8089"},{"name":"OTEL_COLLECTOR_HOST","value":"$(OTEL_COLLECTOR_NAME)"},{"name":"OTEL_COLLECTOR_PORT_GRPC","value":"4317"},{"name":"OTEL_COLLECTOR_PORT_HTTP","value":"4318"},{"name":"OTEL_SERVICE_NAME","value":"frontend-proxy"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-frontendproxy","imagePullPolicy":"IfNotPresent","name":"frontendproxy","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"50Mi"}},"securityContext":{"runAsGroup":101,"runAsNonRoot":true,"runAsUser":101},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: frontendproxy
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontendproxy
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-frontendproxy
    name: opentelemetry-demo-frontendproxy
    namespace: otel-demo
    resourceVersion: "22093"
    uid: ae5d3806-2ed5-4946-b35a-3e3d2595f8d8
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-frontendproxy
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: frontendproxy
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-frontendproxy
          opentelemetry.io/name: opentelemetry-demo-frontendproxy
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: ENVOY_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: FLAGD_UI_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_UI_PORT
            value: "4000"
          - name: FRONTEND_HOST
            value: opentelemetry-demo-frontend
          - name: FRONTEND_PORT
            value: "8080"
          - name: GRAFANA_SERVICE_HOST
            value: opentelemetry-demo-grafana
          - name: GRAFANA_SERVICE_PORT
            value: "80"
          - name: IMAGE_PROVIDER_HOST
            value: opentelemetry-demo-imageprovider
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: JAEGER_SERVICE_HOST
            value: opentelemetry-demo-jaeger-query
          - name: JAEGER_SERVICE_PORT
            value: "16686"
          - name: LOCUST_WEB_HOST
            value: opentelemetry-demo-loadgenerator
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_PORT_HTTP
            value: "4318"
          - name: OTEL_SERVICE_NAME
            value: frontend-proxy
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-frontendproxy
          imagePullPolicy: IfNotPresent
          name: frontendproxy
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:20Z"
      lastUpdateTime: "2024-11-30T15:49:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:49Z"
      lastUpdateTime: "2024-11-30T15:49:20Z"
      message: ReplicaSet "opentelemetry-demo-frontendproxy-74f988cfb4" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"grafana","app.kubernetes.io/version":"11.3.0"},"name":"opentelemetry-demo-grafana","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"grafana"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"checksum/config":"66402109ab73b3549330f38a66f20b78067ca4fdd1b77fc12fd760727d05f34c","checksum/sc-dashboard-provider-config":"e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24","checksum/secret":"bed677784356b2af7fb0d87455db21f077853059b594101a4f6532bfbd962a7f","kubectl.kubernetes.io/default-container":"grafana"},"labels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"grafana"}},"spec":{"automountServiceAccountToken":true,"containers":[{"env":[{"name":"POD_IP","valueFrom":{"fieldRef":{"fieldPath":"status.podIP"}}},{"name":"GF_SECURITY_ADMIN_USER","valueFrom":{"secretKeyRef":{"key":"admin-user","name":"opentelemetry-demo-grafana"}}},{"name":"GF_SECURITY_ADMIN_PASSWORD","valueFrom":{"secretKeyRef":{"key":"admin-password","name":"opentelemetry-demo-grafana"}}},{"name":"GF_INSTALL_PLUGINS","valueFrom":{"configMapKeyRef":{"key":"plugins","name":"opentelemetry-demo-grafana"}}},{"name":"GF_PATHS_DATA","value":"/var/lib/grafana/"},{"name":"GF_PATHS_LOGS","value":"/var/log/grafana"},{"name":"GF_PATHS_PLUGINS","value":"/var/lib/grafana/plugins"},{"name":"GF_PATHS_PROVISIONING","value":"/etc/grafana/provisioning"}],"image":"docker.io/grafana/grafana:11.3.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":10,"httpGet":{"path":"/api/health","port":3000},"initialDelaySeconds":60,"timeoutSeconds":30},"name":"grafana","ports":[{"containerPort":3000,"name":"grafana","protocol":"TCP"},{"containerPort":9094,"name":"gossip-tcp","protocol":"TCP"},{"containerPort":9094,"name":"gossip-udp","protocol":"UDP"}],"readinessProbe":{"httpGet":{"path":"/api/health","port":3000}},"resources":{"limits":{"memory":"150Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/etc/grafana/grafana.ini","name":"config","subPath":"grafana.ini"},{"mountPath":"/var/lib/grafana","name":"storage"},{"mountPath":"/var/lib/grafana/dashboards/default","name":"dashboards-default"},{"mountPath":"/etc/grafana/provisioning/datasources/datasources.yaml","name":"config","subPath":"datasources.yaml"},{"mountPath":"/etc/grafana/provisioning/dashboards/dashboardproviders.yaml","name":"config","subPath":"dashboardproviders.yaml"}]}],"enableServiceLinks":true,"securityContext":{"fsGroup":472,"runAsGroup":472,"runAsNonRoot":true,"runAsUser":472},"serviceAccountName":"opentelemetry-demo-grafana","volumes":[{"configMap":{"name":"opentelemetry-demo-grafana"},"name":"config"},{"configMap":{"name":"opentelemetry-demo-grafana-dashboards"},"name":"dashboards-default"},{"emptyDir":{},"name":"storage"}]}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 11.3.0
    name: opentelemetry-demo-grafana
    namespace: otel-demo
    resourceVersion: "22240"
    uid: e07afe06-74e1-4209-8f38-aef73b20217c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 66402109ab73b3549330f38a66f20b78067ca4fdd1b77fc12fd760727d05f34c
          checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
          checksum/secret: bed677784356b2af7fb0d87455db21f077853059b594101a4f6532bfbd962a7f
          kubectl.kubernetes.io/default-container: grafana
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: grafana
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: opentelemetry-demo-grafana
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: opentelemetry-demo-grafana
          - name: GF_INSTALL_PLUGINS
            valueFrom:
              configMapKeyRef:
                key: plugins
                name: opentelemetry-demo-grafana
          - name: GF_PATHS_DATA
            value: /var/lib/grafana/
          - name: GF_PATHS_LOGS
            value: /var/log/grafana
          - name: GF_PATHS_PLUGINS
            value: /var/lib/grafana/plugins
          - name: GF_PATHS_PROVISIONING
            value: /etc/grafana/provisioning
          image: docker.io/grafana/grafana:11.3.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 3000
            name: grafana
            protocol: TCP
          - containerPort: 9094
            name: gossip-tcp
            protocol: TCP
          - containerPort: 9094
            name: gossip-udp
            protocol: UDP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 150Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
          - mountPath: /var/lib/grafana/dashboards/default
            name: dashboards-default
          - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
            name: config
            subPath: datasources.yaml
          - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
            name: config
            subPath: dashboardproviders.yaml
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsNonRoot: true
          runAsUser: 472
        serviceAccount: opentelemetry-demo-grafana
        serviceAccountName: opentelemetry-demo-grafana
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-grafana
          name: config
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-grafana-dashboards
          name: dashboards-default
        - emptyDir: {}
          name: storage
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:39Z"
      lastUpdateTime: "2024-11-30T15:49:39Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:39Z"
      message: ReplicaSet "opentelemetry-demo-grafana-69b6bd5dd4" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"imageprovider","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-imageprovider","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-imageprovider"},"name":"opentelemetry-demo-imageprovider","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-imageprovider"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"imageprovider","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-imageprovider","opentelemetry.io/name":"opentelemetry-demo-imageprovider"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"IMAGE_PROVIDER_PORT","value":"8081"},{"name":"OTEL_COLLECTOR_PORT_GRPC","value":"4317"},{"name":"OTEL_COLLECTOR_HOST","value":"$(OTEL_COLLECTOR_NAME)"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-imageprovider","imagePullPolicy":"IfNotPresent","name":"imageprovider","ports":[{"containerPort":8081,"name":"service"}],"resources":{"limits":{"memory":"50Mi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: imageprovider
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-imageprovider
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-imageprovider
    name: opentelemetry-demo-imageprovider
    namespace: otel-demo
    resourceVersion: "22195"
    uid: 0581981a-59f9-4fe1-b993-68fab2c9a591
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-imageprovider
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: imageprovider
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-imageprovider
          opentelemetry.io/name: opentelemetry-demo-imageprovider
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-imageprovider
          imagePullPolicy: IfNotPresent
          name: imageprovider
          ports:
          - containerPort: 8081
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:33Z"
      lastUpdateTime: "2024-11-30T15:49:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:49Z"
      lastUpdateTime: "2024-11-30T15:49:33Z"
      message: ReplicaSet "opentelemetry-demo-imageprovider-7466d894fb" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"all-in-one","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger","app.kubernetes.io/version":"1.53.0","prometheus.io/port":"14269","prometheus.io/scrape":"true"},"name":"opentelemetry-demo-jaeger","namespace":"otel-demo"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"all-in-one","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"annotations":{"prometheus.io/port":"14269","prometheus.io/scrape":"true"},"labels":{"app.kubernetes.io/component":"all-in-one","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"jaeger"}},"spec":{"containers":[{"args":["--memory.max-traces=5000","--query.base-path=/jaeger/ui","--prometheus.server-url=http://opentelemetry-demo-prometheus-server:9090","--prometheus.query.normalize-calls=true","--prometheus.query.normalize-duration=true"],"env":[{"name":"METRICS_STORAGE_TYPE","value":"prometheus"},{"name":"COLLECTOR_OTLP_GRPC_HOST_PORT","value":"0.0.0.0:4317"},{"name":"COLLECTOR_OTLP_HTTP_HOST_PORT","value":"0.0.0.0:4318"},{"name":"SPAN_STORAGE_TYPE","value":"memory"},{"name":"COLLECTOR_ZIPKIN_HOST_PORT","value":":9411"},{"name":"JAEGER_DISABLED","value":"false"},{"name":"COLLECTOR_OTLP_ENABLED","value":"true"}],"image":"jaegertracing/all-in-one:1.53.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/","port":14269,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":15,"successThreshold":1,"timeoutSeconds":1},"name":"jaeger","ports":[{"containerPort":5775,"protocol":"UDP"},{"containerPort":6831,"protocol":"UDP"},{"containerPort":6832,"protocol":"UDP"},{"containerPort":5778,"protocol":"TCP"},{"containerPort":16686,"protocol":"TCP"},{"containerPort":16685,"protocol":"TCP"},{"containerPort":9411,"protocol":"TCP"},{"containerPort":4317,"protocol":"TCP"},{"containerPort":4318,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/","port":14269,"scheme":"HTTP"},"initialDelaySeconds":1,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{"memory":"400Mi"}},"securityContext":{},"volumeMounts":null}],"securityContext":{"fsGroup":10001,"runAsGroup":10001,"runAsUser":10001},"serviceAccountName":"opentelemetry-demo-jaeger","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: all-in-one
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/version: 1.53.0
      prometheus.io/port: "14269"
      prometheus.io/scrape: "true"
    name: opentelemetry-demo-jaeger
    namespace: otel-demo
    resourceVersion: "21995"
    uid: 55fbed2f-4d01-404d-814f-f65942c57eeb
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: all-in-one
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: jaeger
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          prometheus.io/port: "14269"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: all-in-one
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: jaeger
      spec:
        containers:
        - args:
          - --memory.max-traces=5000
          - --query.base-path=/jaeger/ui
          - --prometheus.server-url=http://opentelemetry-demo-prometheus-server:9090
          - --prometheus.query.normalize-calls=true
          - --prometheus.query.normalize-duration=true
          env:
          - name: METRICS_STORAGE_TYPE
            value: prometheus
          - name: COLLECTOR_OTLP_GRPC_HOST_PORT
            value: 0.0.0.0:4317
          - name: COLLECTOR_OTLP_HTTP_HOST_PORT
            value: 0.0.0.0:4318
          - name: SPAN_STORAGE_TYPE
            value: memory
          - name: COLLECTOR_ZIPKIN_HOST_PORT
            value: :9411
          - name: JAEGER_DISABLED
            value: "false"
          - name: COLLECTOR_OTLP_ENABLED
            value: "true"
          image: jaegertracing/all-in-one:1.53.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          name: jaeger
          ports:
          - containerPort: 5775
            protocol: UDP
          - containerPort: 6831
            protocol: UDP
          - containerPort: 6832
            protocol: UDP
          - containerPort: 5778
            protocol: TCP
          - containerPort: 16686
            protocol: TCP
          - containerPort: 16685
            protocol: TCP
          - containerPort: 9411
            protocol: TCP
          - containerPort: 4317
            protocol: TCP
          - containerPort: 4318
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 400Mi
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 10001
          runAsGroup: 10001
          runAsUser: 10001
        serviceAccount: opentelemetry-demo-jaeger
        serviceAccountName: opentelemetry-demo-jaeger
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:00Z"
      lastUpdateTime: "2024-11-30T15:49:00Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:00Z"
      message: ReplicaSet "opentelemetry-demo-jaeger-7785549bb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"kafka","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-kafka","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-kafka"},"name":"opentelemetry-demo-kafka","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-kafka"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"kafka","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-kafka","opentelemetry.io/name":"opentelemetry-demo-kafka"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"KAFKA_ADVERTISED_LISTENERS","value":"PLAINTEXT://opentelemetry-demo-kafka:9092"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4318"},{"name":"KAFKA_HEAP_OPTS","value":"-Xmx400M -Xms400M"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-kafka","imagePullPolicy":"IfNotPresent","name":"kafka","ports":[{"containerPort":9092,"name":"plaintext"},{"containerPort":9093,"name":"controller"}],"resources":{"limits":{"memory":"600Mi"}},"securityContext":{"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: kafka
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-kafka
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-kafka
    name: opentelemetry-demo-kafka
    namespace: otel-demo
    resourceVersion: "22228"
    uid: cf944157-654c-416b-b081-aa571f6f2990
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-kafka
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: kafka
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-kafka
          opentelemetry.io/name: opentelemetry-demo-kafka
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://opentelemetry-demo-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: KAFKA_HEAP_OPTS
            value: -Xmx400M -Xms400M
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-kafka
          imagePullPolicy: IfNotPresent
          name: kafka
          ports:
          - containerPort: 9092
            name: plaintext
            protocol: TCP
          - containerPort: 9093
            name: controller
            protocol: TCP
          resources:
            limits:
              memory: 600Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:37Z"
      lastUpdateTime: "2024-11-30T15:49:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:49Z"
      lastUpdateTime: "2024-11-30T15:49:37Z"
      message: ReplicaSet "opentelemetry-demo-kafka-76d4d9f48b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"loadgenerator","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-loadgenerator","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-loadgenerator"},"name":"opentelemetry-demo-loadgenerator","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-loadgenerator"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"loadgenerator","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-loadgenerator","opentelemetry.io/name":"opentelemetry-demo-loadgenerator"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"LOCUST_WEB_PORT","value":"8089"},{"name":"LOCUST_USERS","value":"10"},{"name":"LOCUST_SPAWN_RATE","value":"1"},{"name":"LOCUST_HOST","value":"http://opentelemetry-demo-frontendproxy:8080"},{"name":"LOCUST_HEADLESS","value":"false"},{"name":"LOCUST_AUTOSTART","value":"true"},{"name":"LOCUST_BROWSER_TRAFFIC_ENABLED","value":"true"},{"name":"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION","value":"python"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-loadgenerator","imagePullPolicy":"IfNotPresent","name":"loadgenerator","ports":[{"containerPort":8089,"name":"service"}],"resources":{"limits":{"memory":"1Gi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: loadgenerator
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-loadgenerator
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-loadgenerator
    name: opentelemetry-demo-loadgenerator
    namespace: otel-demo
    resourceVersion: "22375"
    uid: 07efa6cb-3f96-4fb3-9cfc-4adc4e3d201f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-loadgenerator
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: loadgenerator
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-loadgenerator
          opentelemetry.io/name: opentelemetry-demo-loadgenerator
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: LOCUST_USERS
            value: "10"
          - name: LOCUST_SPAWN_RATE
            value: "1"
          - name: LOCUST_HOST
            value: http://opentelemetry-demo-frontendproxy:8080
          - name: LOCUST_HEADLESS
            value: "false"
          - name: LOCUST_AUTOSTART
            value: "true"
          - name: LOCUST_BROWSER_TRAFFIC_ENABLED
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-loadgenerator
          imagePullPolicy: IfNotPresent
          name: loadgenerator
          ports:
          - containerPort: 8089
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:50:12Z"
      lastUpdateTime: "2024-11-30T15:50:12Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:50Z"
      lastUpdateTime: "2024-11-30T15:50:12Z"
      message: ReplicaSet "opentelemetry-demo-loadgenerator-54db796687" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"otelcol","app.kubernetes.io/version":"0.113.0"},"name":"opentelemetry-demo-otelcol","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"otelcol","component":"standalone-collector"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"checksum/config":"2d923ab8c3aa2c63ec32fe4a7aa4993b12f3e03b2e255f1909b97f5e43b58226","opentelemetry_community_demo":"true","prometheus.io/port":"9464","prometheus.io/scrape":"true"},"labels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"otelcol","component":"standalone-collector"}},"spec":{"containers":[{"args":["--config=/conf/relay.yaml"],"env":[{"name":"MY_POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"GOMEMLIMIT","value":"160MiB"}],"image":"otel/opentelemetry-collector-contrib:0.113.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/","port":13133}},"name":"opentelemetry-collector","ports":[{"containerPort":6831,"name":"jaeger-compact","protocol":"UDP"},{"containerPort":14250,"name":"jaeger-grpc","protocol":"TCP"},{"containerPort":14268,"name":"jaeger-thrift","protocol":"TCP"},{"containerPort":8888,"name":"metrics","protocol":"TCP"},{"containerPort":4317,"name":"otlp","protocol":"TCP"},{"containerPort":4318,"name":"otlp-http","protocol":"TCP"},{"containerPort":9464,"name":"prometheus","protocol":"TCP"},{"containerPort":9411,"name":"zipkin","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/","port":13133}},"resources":{"limits":{"memory":"200Mi"}},"securityContext":{},"volumeMounts":[{"mountPath":"/conf","name":"opentelemetry-collector-configmap"}]}],"hostNetwork":false,"securityContext":{},"serviceAccountName":"opentelemetry-demo-otelcol","volumes":[{"configMap":{"items":[{"key":"relay","path":"relay.yaml"}],"name":"opentelemetry-demo-otelcol"},"name":"opentelemetry-collector-configmap"}]}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/version: 0.113.0
    name: opentelemetry-demo-otelcol
    namespace: otel-demo
    resourceVersion: "22080"
    uid: 6de616ff-3ae1-4506-86ee-e854bbe7dcc5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: otelcol
        component: standalone-collector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 2d923ab8c3aa2c63ec32fe4a7aa4993b12f3e03b2e255f1909b97f5e43b58226
          opentelemetry_community_demo: "true"
          prometheus.io/port: "9464"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: otelcol
          component: standalone-collector
      spec:
        containers:
        - args:
          - --config=/conf/relay.yaml
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GOMEMLIMIT
            value: 160MiB
          image: otel/opentelemetry-collector-contrib:0.113.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 13133
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: opentelemetry-collector
          ports:
          - containerPort: 6831
            name: jaeger-compact
            protocol: UDP
          - containerPort: 14250
            name: jaeger-grpc
            protocol: TCP
          - containerPort: 14268
            name: jaeger-thrift
            protocol: TCP
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 4317
            name: otlp
            protocol: TCP
          - containerPort: 4318
            name: otlp-http
            protocol: TCP
          - containerPort: 9464
            name: prometheus
            protocol: TCP
          - containerPort: 9411
            name: zipkin
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 13133
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 200Mi
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /conf
            name: opentelemetry-collector-configmap
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo-otelcol
        serviceAccountName: opentelemetry-demo-otelcol
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: relay
              path: relay.yaml
            name: opentelemetry-demo-otelcol
          name: opentelemetry-collector-configmap
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:19Z"
      lastUpdateTime: "2024-11-30T15:49:19Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:49:19Z"
      message: ReplicaSet "opentelemetry-demo-otelcol-5c757cfcf" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"paymentservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-paymentservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-paymentservice"},"name":"opentelemetry-demo-paymentservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-paymentservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"paymentservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-paymentservice","opentelemetry.io/name":"opentelemetry-demo-paymentservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"PAYMENT_SERVICE_PORT","value":"8080"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-paymentservice","imagePullPolicy":"IfNotPresent","name":"paymentservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"120Mi"}},"securityContext":{"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: paymentservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-paymentservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-paymentservice
    name: opentelemetry-demo-paymentservice
    namespace: otel-demo
    resourceVersion: "22099"
    uid: 7b2d90e8-0a87-40a2-b723-fccf5875adb0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-paymentservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: paymentservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-paymentservice
          opentelemetry.io/name: opentelemetry-demo-paymentservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PAYMENT_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-paymentservice
          imagePullPolicy: IfNotPresent
          name: paymentservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:20Z"
      lastUpdateTime: "2024-11-30T15:49:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:50Z"
      lastUpdateTime: "2024-11-30T15:49:20Z"
      message: ReplicaSet "opentelemetry-demo-paymentservice-857974bcdb" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"productcatalogservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-productcatalogservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-productcatalogservice"},"name":"opentelemetry-demo-productcatalogservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-productcatalogservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"productcatalogservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-productcatalogservice","opentelemetry.io/name":"opentelemetry-demo-productcatalogservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"PRODUCT_CATALOG_SERVICE_PORT","value":"8080"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-productcatalogservice","imagePullPolicy":"IfNotPresent","name":"productcatalogservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"20Mi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: productcatalogservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-productcatalogservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-productcatalogservice
    name: opentelemetry-demo-productcatalogservice
    namespace: otel-demo
    resourceVersion: "21976"
    uid: 50867415-a2a9-4f63-ad88-b54b198ecc6e
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-productcatalogservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: productcatalogservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-productcatalogservice
          opentelemetry.io/name: opentelemetry-demo-productcatalogservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PRODUCT_CATALOG_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-productcatalogservice
          imagePullPolicy: IfNotPresent
          name: productcatalogservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:48:59Z"
      lastUpdateTime: "2024-11-30T15:48:59Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:50Z"
      lastUpdateTime: "2024-11-30T15:48:59Z"
      message: ReplicaSet "opentelemetry-demo-productcatalogservice-6bc98644f9" has
        successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"prometheus","app.kubernetes.io/part-of":"prometheus","app.kubernetes.io/version":"v2.55.1"},"name":"opentelemetry-demo-prometheus-server","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"prometheus"}},"strategy":{"rollingUpdate":null,"type":"Recreate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"prometheus","app.kubernetes.io/part-of":"prometheus","app.kubernetes.io/version":"v2.55.1"}},"spec":{"containers":[{"args":["--storage.tsdb.retention.time=15d","--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--enable-feature=exemplar-storage","--enable-feature=otlp-write-receiver"],"image":"quay.io/prometheus/prometheus:v2.55.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":15,"successThreshold":1,"timeoutSeconds":10},"name":"prometheus-server","ports":[{"containerPort":9090}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":4},"resources":{"limits":{"memory":"300Mi"}},"volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume","subPath":""}]}],"dnsPolicy":"ClusterFirst","enableServiceLinks":true,"securityContext":{"fsGroup":65534,"runAsGroup":65534,"runAsNonRoot":true,"runAsUser":65534},"serviceAccountName":"opentelemetry-demo-prometheus-server","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"name":"opentelemetry-demo-prometheus-server"},"name":"config-volume"},{"emptyDir":{},"name":"storage-volume"}]}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.55.1
    name: opentelemetry-demo-prometheus-server
    namespace: otel-demo
    resourceVersion: "22340"
    uid: c22843a6-1edd-40bd-a087-62887d12780f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: prometheus
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: server
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: prometheus
          app.kubernetes.io/part-of: prometheus
          app.kubernetes.io/version: v2.55.1
      spec:
        containers:
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --enable-feature=exemplar-storage
          - --enable-feature=otlp-write-receiver
          image: quay.io/prometheus/prometheus:v2.55.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: opentelemetry-demo-prometheus-server
        serviceAccountName: opentelemetry-demo-prometheus-server
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-prometheus-server
          name: config-volume
        - emptyDir: {}
          name: storage-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:50:04Z"
      lastUpdateTime: "2024-11-30T15:50:04Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:48Z"
      lastUpdateTime: "2024-11-30T15:50:04Z"
      message: ReplicaSet "opentelemetry-demo-prometheus-server-57cd8f9d46" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"quoteservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-quoteservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-quoteservice"},"name":"opentelemetry-demo-quoteservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-quoteservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"quoteservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-quoteservice","opentelemetry.io/name":"opentelemetry-demo-quoteservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"QUOTE_SERVICE_PORT","value":"8080"},{"name":"OTEL_PHP_AUTOLOAD_ENABLED","value":"true"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4318"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-quoteservice","imagePullPolicy":"IfNotPresent","name":"quoteservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"40Mi"}},"securityContext":{"runAsGroup":33,"runAsNonRoot":true,"runAsUser":33},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: quoteservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-quoteservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-quoteservice
    name: opentelemetry-demo-quoteservice
    namespace: otel-demo
    resourceVersion: "22140"
    uid: 8462a53b-ece2-4bd6-b612-61fda705df64
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-quoteservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: quoteservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-quoteservice
          opentelemetry.io/name: opentelemetry-demo-quoteservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: QUOTE_SERVICE_PORT
            value: "8080"
          - name: OTEL_PHP_AUTOLOAD_ENABLED
            value: "true"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-quoteservice
          imagePullPolicy: IfNotPresent
          name: quoteservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:25Z"
      lastUpdateTime: "2024-11-30T15:49:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:50Z"
      lastUpdateTime: "2024-11-30T15:49:25Z"
      message: ReplicaSet "opentelemetry-demo-quoteservice-5658c58fd7" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"recommendationservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-recommendationservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-recommendationservice"},"name":"opentelemetry-demo-recommendationservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-recommendationservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"recommendationservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-recommendationservice","opentelemetry.io/name":"opentelemetry-demo-recommendationservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"RECOMMENDATION_SERVICE_PORT","value":"8080"},{"name":"PRODUCT_CATALOG_SERVICE_ADDR","value":"opentelemetry-demo-productcatalogservice:8080"},{"name":"OTEL_PYTHON_LOG_CORRELATION","value":"true"},{"name":"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION","value":"python"},{"name":"FLAGD_HOST","value":"opentelemetry-demo-flagd"},{"name":"FLAGD_PORT","value":"8013"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-recommendationservice","imagePullPolicy":"IfNotPresent","name":"recommendationservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"500Mi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: recommendationservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-recommendationservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-recommendationservice
    name: opentelemetry-demo-recommendationservice
    namespace: otel-demo
    resourceVersion: "22109"
    uid: f4b55336-ce3b-4950-8b29-d7a6725c8873
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-recommendationservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: recommendationservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-recommendationservice
          opentelemetry.io/name: opentelemetry-demo-recommendationservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: RECOMMENDATION_SERVICE_PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: opentelemetry-demo-productcatalogservice:8080
          - name: OTEL_PYTHON_LOG_CORRELATION
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-recommendationservice
          imagePullPolicy: IfNotPresent
          name: recommendationservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:21Z"
      lastUpdateTime: "2024-11-30T15:49:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:51Z"
      lastUpdateTime: "2024-11-30T15:49:21Z"
      message: ReplicaSet "opentelemetry-demo-recommendationservice-6f576fd574" has
        successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"shippingservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-shippingservice","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-shippingservice"},"name":"opentelemetry-demo-shippingservice","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-shippingservice"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"shippingservice","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-shippingservice","opentelemetry.io/name":"opentelemetry-demo-shippingservice"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"SHIPPING_SERVICE_PORT","value":"8080"},{"name":"QUOTE_SERVICE_ADDR","value":"http://opentelemetry-demo-quoteservice:8080"},{"name":"OTEL_EXPORTER_OTLP_ENDPOINT","value":"http://$(OTEL_COLLECTOR_NAME):4317"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"ghcr.io/open-telemetry/demo:1.12.0-shippingservice","imagePullPolicy":"IfNotPresent","name":"shippingservice","ports":[{"containerPort":8080,"name":"service"}],"resources":{"limits":{"memory":"20Mi"}},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: shippingservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-shippingservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-shippingservice
    name: opentelemetry-demo-shippingservice
    namespace: otel-demo
    resourceVersion: "22063"
    uid: a1b5ca35-96a0-419a-a30c-4cfe49519d7f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-shippingservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: shippingservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-shippingservice
          opentelemetry.io/name: opentelemetry-demo-shippingservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: SHIPPING_SERVICE_PORT
            value: "8080"
          - name: QUOTE_SERVICE_ADDR
            value: http://opentelemetry-demo-quoteservice:8080
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-shippingservice
          imagePullPolicy: IfNotPresent
          name: shippingservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:17Z"
      lastUpdateTime: "2024-11-30T15:49:17Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:51Z"
      lastUpdateTime: "2024-11-30T15:49:17Z"
      message: ReplicaSet "opentelemetry-demo-shippingservice-fcfc7765" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"valkey","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-valkey","app.kubernetes.io/part-of":"opentelemetry-demo","app.kubernetes.io/version":"1.12.0","opentelemetry.io/name":"opentelemetry-demo-valkey"},"name":"opentelemetry-demo-valkey","namespace":"otel-demo"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"opentelemetry.io/name":"opentelemetry-demo-valkey"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"valkey","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opentelemetry-demo-valkey","opentelemetry.io/name":"opentelemetry-demo-valkey"}},"spec":{"containers":[{"env":[{"name":"OTEL_SERVICE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels['app.kubernetes.io/component']"}}},{"name":"OTEL_COLLECTOR_NAME","value":"opentelemetry-demo-otelcol"},{"name":"OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","value":"cumulative"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0"}],"image":"valkey/valkey:7.2-alpine","imagePullPolicy":"IfNotPresent","name":"valkey","ports":[{"containerPort":6379,"name":"valkey"}],"resources":{"limits":{"memory":"20Mi"}},"securityContext":{"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":999},"volumeMounts":null}],"serviceAccountName":"opentelemetry-demo","volumes":null}}}}
    creationTimestamp: "2024-11-30T15:48:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: valkey
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-valkey
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.12.0
      opentelemetry.io/name: opentelemetry-demo-valkey
    name: opentelemetry-demo-valkey
    namespace: otel-demo
    resourceVersion: "22114"
    uid: b8e194c5-f263-4355-a721-6b1822ecf921
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-valkey
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: valkey
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-valkey
          opentelemetry.io/name: opentelemetry-demo-valkey
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: valkey/valkey:7.2-alpine
          imagePullPolicy: IfNotPresent
          name: valkey
          ports:
          - containerPort: 6379
            name: valkey
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-11-30T15:49:21Z"
      lastUpdateTime: "2024-11-30T15:49:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-11-30T15:48:51Z"
      lastUpdateTime: "2024-11-30T15:49:21Z"
      message: ReplicaSet "opentelemetry-demo-valkey-68b4cb4498" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: accountingservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-accountingservice
      opentelemetry.io/name: opentelemetry-demo-accountingservice
      pod-template-hash: 8555cb59fb
    name: opentelemetry-demo-accountingservice-8555cb59fb
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-accountingservice
      uid: 558526fc-08f8-4590-b812-81a0b35567cc
    resourceVersion: "22433"
    uid: 9694bbf1-9077-4f63-b74e-faf8656ab0e1
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-accountingservice
        pod-template-hash: 8555cb59fb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: accountingservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-accountingservice
          opentelemetry.io/name: opentelemetry-demo-accountingservice
          pod-template-hash: 8555cb59fb
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: opentelemetry-demo-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-accountingservice
          imagePullPolicy: IfNotPresent
          name: accountingservice
          resources:
            limits:
              memory: 120Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for
            kafka; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: adservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-adservice
      opentelemetry.io/name: opentelemetry-demo-adservice
      pod-template-hash: 5df4bf56d6
    name: opentelemetry-demo-adservice-5df4bf56d6
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-adservice
      uid: 02abcb01-35db-4e97-962d-b49366a1ab68
    resourceVersion: "22182"
    uid: 0a6a4be4-fe58-474d-a714-426960543e94
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-adservice
        pod-template-hash: 5df4bf56d6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: adservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-adservice
          opentelemetry.io/name: opentelemetry-demo-adservice
          pod-template-hash: 5df4bf56d6
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: AD_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_LOGS_EXPORTER
            value: otlp
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-adservice
          imagePullPolicy: IfNotPresent
          name: adservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: cartservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-cartservice
      opentelemetry.io/name: opentelemetry-demo-cartservice
      pod-template-hash: 694df79ff7
    name: opentelemetry-demo-cartservice-694df79ff7
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-cartservice
      uid: 0e43bdde-b99a-4807-9206-3a9d3633bb4d
    resourceVersion: "22272"
    uid: be8b12b4-510d-4ff7-b33a-ce66cb409c7e
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-cartservice
        pod-template-hash: 694df79ff7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cartservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-cartservice
          opentelemetry.io/name: opentelemetry-demo-cartservice
          pod-template-hash: 694df79ff7
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CART_SERVICE_PORT
            value: "8080"
          - name: ASPNETCORE_URLS
            value: http://*:$(CART_SERVICE_PORT)
          - name: VALKEY_ADDR
            value: opentelemetry-demo-valkey:6379
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-cartservice
          imagePullPolicy: IfNotPresent
          name: cartservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 160Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-valkey 6379; do echo waiting for
            valkey; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-valkey
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: checkoutservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-checkoutservice
      opentelemetry.io/name: opentelemetry-demo-checkoutservice
      pod-template-hash: 744b6cdd6
    name: opentelemetry-demo-checkoutservice-744b6cdd6
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-checkoutservice
      uid: b05c445a-6412-4bfd-89ec-cea8b13f769e
    resourceVersion: "22418"
    uid: 9f64e5ed-d5bc-4a24-8d2e-e9f9a0f2713f
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-checkoutservice
        pod-template-hash: 744b6cdd6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: checkoutservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-checkoutservice
          opentelemetry.io/name: opentelemetry-demo-checkoutservice
          pod-template-hash: 744b6cdd6
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CHECKOUT_SERVICE_PORT
            value: "8080"
          - name: CART_SERVICE_ADDR
            value: opentelemetry-demo-cartservice:8080
          - name: CURRENCY_SERVICE_ADDR
            value: opentelemetry-demo-currencyservice:8080
          - name: EMAIL_SERVICE_ADDR
            value: http://opentelemetry-demo-emailservice:8080
          - name: PAYMENT_SERVICE_ADDR
            value: opentelemetry-demo-paymentservice:8080
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: opentelemetry-demo-productcatalogservice:8080
          - name: SHIPPING_SERVICE_ADDR
            value: opentelemetry-demo-shippingservice:8080
          - name: KAFKA_SERVICE_ADDR
            value: opentelemetry-demo-kafka:9092
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-checkoutservice
          imagePullPolicy: IfNotPresent
          name: checkoutservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for
            kafka; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: currencyservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-currencyservice
      opentelemetry.io/name: opentelemetry-demo-currencyservice
      pod-template-hash: 6b8fcd9bd6
    name: opentelemetry-demo-currencyservice-6b8fcd9bd6
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-currencyservice
      uid: e04a1923-e37a-4bfa-8d07-5627531323fa
    resourceVersion: "22032"
    uid: 0b15eb1f-4a31-4cfe-83ec-0f60d8dc830e
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-currencyservice
        pod-template-hash: 6b8fcd9bd6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: currencyservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-currencyservice
          opentelemetry.io/name: opentelemetry-demo-currencyservice
          pod-template-hash: 6b8fcd9bd6
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CURRENCY_SERVICE_PORT
            value: "8080"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: VERSION
            value: 1.12.0
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-currencyservice
          imagePullPolicy: IfNotPresent
          name: currencyservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: emailservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-emailservice
      opentelemetry.io/name: opentelemetry-demo-emailservice
      pod-template-hash: 66d8476fdc
    name: opentelemetry-demo-emailservice-66d8476fdc
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-emailservice
      uid: 1f7906fa-26da-4ddb-bd54-cb109c4773eb
    resourceVersion: "22187"
    uid: bc18ffae-de1d-4578-97b5-7a3b059f8058
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-emailservice
        pod-template-hash: 66d8476fdc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: emailservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-emailservice
          opentelemetry.io/name: opentelemetry-demo-emailservice
          pod-template-hash: 66d8476fdc
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: EMAIL_SERVICE_PORT
            value: "8080"
          - name: APP_ENV
            value: production
          - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-emailservice
          imagePullPolicy: IfNotPresent
          name: emailservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: flagd
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-flagd
      opentelemetry.io/name: opentelemetry-demo-flagd
      pod-template-hash: 679866d767
    name: opentelemetry-demo-flagd-679866d767
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-flagd
      uid: 5911f5a3-ca00-44d4-a125-7dbc1aeb8037
    resourceVersion: "22221"
    uid: fc97433e-f177-43c0-ac20-7617758abc30
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-flagd
        pod-template-hash: 679866d767
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: flagd
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-flagd
          opentelemetry.io/name: opentelemetry-demo-flagd
          pod-template-hash: 679866d767
      spec:
        containers:
        - command:
          - /flagd-build
          - start
          - --uri
          - file:./etc/flagd/demo.flagd.json
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: FLAGD_OTEL_COLLECTOR_URI
            value: $(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-feature/flagd:v0.11.1
          imagePullPolicy: IfNotPresent
          name: flagd
          ports:
          - containerPort: 8013
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/flagd
            name: config-rw
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-flagdui
          imagePullPolicy: IfNotPresent
          name: flagdui
          ports:
          - containerPort: 4000
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/data
            name: config-rw
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - cp /config-ro/demo.flagd.json /config-rw/demo.flagd.json && cat /config-rw/demo.flagd.json
          image: busybox
          imagePullPolicy: Always
          name: init-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config-ro
            name: config-ro
          - mountPath: /config-rw
            name: config-rw
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: config-rw
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-flagd-config
          name: config-ro
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: frauddetectionservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frauddetectionservice
      opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
      pod-template-hash: 85d48f855f
    name: opentelemetry-demo-frauddetectionservice-85d48f855f
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-frauddetectionservice
      uid: 8a2496a9-d304-425b-82e6-2d3ae6bb5e10
    resourceVersion: "22459"
    uid: b7749fa1-39b8-4588-88ae-f020433b884b
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
        pod-template-hash: 85d48f855f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: frauddetectionservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-frauddetectionservice
          opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
          pod-template-hash: 85d48f855f
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: opentelemetry-demo-kafka:9092
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-frauddetectionservice
          imagePullPolicy: IfNotPresent
          name: frauddetectionservice
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting for
            kafka; sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontend
      opentelemetry.io/name: opentelemetry-demo-frontend
      pod-template-hash: 59bccd8fdb
    name: opentelemetry-demo-frontend-59bccd8fdb
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-frontend
      uid: 9068de23-cda9-419f-be70-7fb6478e00ad
    resourceVersion: "22345"
    uid: 04f88784-353f-4014-bb8e-09ec53876cec
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-frontend
        pod-template-hash: 59bccd8fdb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: frontend
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-frontend
          opentelemetry.io/name: opentelemetry-demo-frontend
          pod-template-hash: 59bccd8fdb
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FRONTEND_PORT
            value: "8080"
          - name: FRONTEND_ADDR
            value: :8080
          - name: AD_SERVICE_ADDR
            value: opentelemetry-demo-adservice:8080
          - name: CART_SERVICE_ADDR
            value: opentelemetry-demo-cartservice:8080
          - name: CHECKOUT_SERVICE_ADDR
            value: opentelemetry-demo-checkoutservice:8080
          - name: CURRENCY_SERVICE_ADDR
            value: opentelemetry-demo-currencyservice:8080
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: opentelemetry-demo-productcatalogservice:8080
          - name: RECOMMENDATION_SERVICE_ADDR
            value: opentelemetry-demo-recommendationservice:8080
          - name: SHIPPING_SERVICE_ADDR
            value: opentelemetry-demo-shippingservice:8080
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: WEB_OTEL_SERVICE_NAME
            value: frontend-web
          - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://localhost:8080/otlp-http/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-frontend
          imagePullPolicy: IfNotPresent
          name: frontend
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 250Mi
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: frontendproxy
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-frontendproxy
      opentelemetry.io/name: opentelemetry-demo-frontendproxy
      pod-template-hash: 74f988cfb4
    name: opentelemetry-demo-frontendproxy-74f988cfb4
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-frontendproxy
      uid: ae5d3806-2ed5-4946-b35a-3e3d2595f8d8
    resourceVersion: "22089"
    uid: a9a0db64-eecd-447d-b458-b778998bee14
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-frontendproxy
        pod-template-hash: 74f988cfb4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: frontendproxy
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-frontendproxy
          opentelemetry.io/name: opentelemetry-demo-frontendproxy
          pod-template-hash: 74f988cfb4
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: ENVOY_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: FLAGD_UI_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_UI_PORT
            value: "4000"
          - name: FRONTEND_HOST
            value: opentelemetry-demo-frontend
          - name: FRONTEND_PORT
            value: "8080"
          - name: GRAFANA_SERVICE_HOST
            value: opentelemetry-demo-grafana
          - name: GRAFANA_SERVICE_PORT
            value: "80"
          - name: IMAGE_PROVIDER_HOST
            value: opentelemetry-demo-imageprovider
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: JAEGER_SERVICE_HOST
            value: opentelemetry-demo-jaeger-query
          - name: JAEGER_SERVICE_PORT
            value: "16686"
          - name: LOCUST_WEB_HOST
            value: opentelemetry-demo-loadgenerator
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_PORT_HTTP
            value: "4318"
          - name: OTEL_SERVICE_NAME
            value: frontend-proxy
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-frontendproxy
          imagePullPolicy: IfNotPresent
          name: frontendproxy
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: grafana
      pod-template-hash: 69b6bd5dd4
    name: opentelemetry-demo-grafana-69b6bd5dd4
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-grafana
      uid: e07afe06-74e1-4209-8f38-aef73b20217c
    resourceVersion: "22239"
    uid: 9f7bfac0-1b66-45ed-be2f-38b607c0ea4a
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: grafana
        pod-template-hash: 69b6bd5dd4
    template:
      metadata:
        annotations:
          checksum/config: 66402109ab73b3549330f38a66f20b78067ca4fdd1b77fc12fd760727d05f34c
          checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
          checksum/secret: bed677784356b2af7fb0d87455db21f077853059b594101a4f6532bfbd962a7f
          kubectl.kubernetes.io/default-container: grafana
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: grafana
          pod-template-hash: 69b6bd5dd4
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: opentelemetry-demo-grafana
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: opentelemetry-demo-grafana
          - name: GF_INSTALL_PLUGINS
            valueFrom:
              configMapKeyRef:
                key: plugins
                name: opentelemetry-demo-grafana
          - name: GF_PATHS_DATA
            value: /var/lib/grafana/
          - name: GF_PATHS_LOGS
            value: /var/log/grafana
          - name: GF_PATHS_PLUGINS
            value: /var/lib/grafana/plugins
          - name: GF_PATHS_PROVISIONING
            value: /etc/grafana/provisioning
          image: docker.io/grafana/grafana:11.3.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 3000
            name: grafana
            protocol: TCP
          - containerPort: 9094
            name: gossip-tcp
            protocol: TCP
          - containerPort: 9094
            name: gossip-udp
            protocol: UDP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 150Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
          - mountPath: /var/lib/grafana/dashboards/default
            name: dashboards-default
          - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
            name: config
            subPath: datasources.yaml
          - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
            name: config
            subPath: dashboardproviders.yaml
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsNonRoot: true
          runAsUser: 472
        serviceAccount: opentelemetry-demo-grafana
        serviceAccountName: opentelemetry-demo-grafana
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-grafana
          name: config
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-grafana-dashboards
          name: dashboards-default
        - emptyDir: {}
          name: storage
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: imageprovider
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-imageprovider
      opentelemetry.io/name: opentelemetry-demo-imageprovider
      pod-template-hash: 7466d894fb
    name: opentelemetry-demo-imageprovider-7466d894fb
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-imageprovider
      uid: 0581981a-59f9-4fe1-b993-68fab2c9a591
    resourceVersion: "22194"
    uid: 591b2eb6-fd2b-4433-b8e2-c834b4819f6e
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-imageprovider
        pod-template-hash: 7466d894fb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: imageprovider
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-imageprovider
          opentelemetry.io/name: opentelemetry-demo-imageprovider
          pod-template-hash: 7466d894fb
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-imageprovider
          imagePullPolicy: IfNotPresent
          name: imageprovider
          ports:
          - containerPort: 8081
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: all-in-one
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: jaeger
      pod-template-hash: 7785549bb
    name: opentelemetry-demo-jaeger-7785549bb
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-jaeger
      uid: 55fbed2f-4d01-404d-814f-f65942c57eeb
    resourceVersion: "21988"
    uid: 1bb52942-97b4-401f-a7d8-335f04e74f94
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: all-in-one
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: jaeger
        pod-template-hash: 7785549bb
    template:
      metadata:
        annotations:
          prometheus.io/port: "14269"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: all-in-one
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: jaeger
          pod-template-hash: 7785549bb
      spec:
        containers:
        - args:
          - --memory.max-traces=5000
          - --query.base-path=/jaeger/ui
          - --prometheus.server-url=http://opentelemetry-demo-prometheus-server:9090
          - --prometheus.query.normalize-calls=true
          - --prometheus.query.normalize-duration=true
          env:
          - name: METRICS_STORAGE_TYPE
            value: prometheus
          - name: COLLECTOR_OTLP_GRPC_HOST_PORT
            value: 0.0.0.0:4317
          - name: COLLECTOR_OTLP_HTTP_HOST_PORT
            value: 0.0.0.0:4318
          - name: SPAN_STORAGE_TYPE
            value: memory
          - name: COLLECTOR_ZIPKIN_HOST_PORT
            value: :9411
          - name: JAEGER_DISABLED
            value: "false"
          - name: COLLECTOR_OTLP_ENABLED
            value: "true"
          image: jaegertracing/all-in-one:1.53.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          name: jaeger
          ports:
          - containerPort: 5775
            protocol: UDP
          - containerPort: 6831
            protocol: UDP
          - containerPort: 6832
            protocol: UDP
          - containerPort: 5778
            protocol: TCP
          - containerPort: 16686
            protocol: TCP
          - containerPort: 16685
            protocol: TCP
          - containerPort: 9411
            protocol: TCP
          - containerPort: 4317
            protocol: TCP
          - containerPort: 4318
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 400Mi
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 10001
          runAsGroup: 10001
          runAsUser: 10001
        serviceAccount: opentelemetry-demo-jaeger
        serviceAccountName: opentelemetry-demo-jaeger
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: kafka
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-kafka
      opentelemetry.io/name: opentelemetry-demo-kafka
      pod-template-hash: 76d4d9f48b
    name: opentelemetry-demo-kafka-76d4d9f48b
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-kafka
      uid: cf944157-654c-416b-b081-aa571f6f2990
    resourceVersion: "22225"
    uid: 8dab3a75-77b0-45f1-850a-9330d23b4ba6
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-kafka
        pod-template-hash: 76d4d9f48b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: kafka
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-kafka
          opentelemetry.io/name: opentelemetry-demo-kafka
          pod-template-hash: 76d4d9f48b
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://opentelemetry-demo-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: KAFKA_HEAP_OPTS
            value: -Xmx400M -Xms400M
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-kafka
          imagePullPolicy: IfNotPresent
          name: kafka
          ports:
          - containerPort: 9092
            name: plaintext
            protocol: TCP
          - containerPort: 9093
            name: controller
            protocol: TCP
          resources:
            limits:
              memory: 600Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:50Z"
    generation: 1
    labels:
      app.kubernetes.io/component: loadgenerator
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-loadgenerator
      opentelemetry.io/name: opentelemetry-demo-loadgenerator
      pod-template-hash: 54db796687
    name: opentelemetry-demo-loadgenerator-54db796687
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-loadgenerator
      uid: 07efa6cb-3f96-4fb3-9cfc-4adc4e3d201f
    resourceVersion: "22374"
    uid: 5a6b1af9-6c6a-4b9f-9f23-e7b5df60ed69
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-loadgenerator
        pod-template-hash: 54db796687
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: loadgenerator
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-loadgenerator
          opentelemetry.io/name: opentelemetry-demo-loadgenerator
          pod-template-hash: 54db796687
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: LOCUST_USERS
            value: "10"
          - name: LOCUST_SPAWN_RATE
            value: "1"
          - name: LOCUST_HOST
            value: http://opentelemetry-demo-frontendproxy:8080
          - name: LOCUST_HEADLESS
            value: "false"
          - name: LOCUST_AUTOSTART
            value: "true"
          - name: LOCUST_BROWSER_TRAFFIC_ENABLED
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-loadgenerator
          imagePullPolicy: IfNotPresent
          name: loadgenerator
          ports:
          - containerPort: 8089
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: otelcol
      component: standalone-collector
      pod-template-hash: 5c757cfcf
    name: opentelemetry-demo-otelcol-5c757cfcf
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-otelcol
      uid: 6de616ff-3ae1-4506-86ee-e854bbe7dcc5
    resourceVersion: "22079"
    uid: 18864204-b7c3-4132-9b22-aa375c0e2a57
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: otelcol
        component: standalone-collector
        pod-template-hash: 5c757cfcf
    template:
      metadata:
        annotations:
          checksum/config: 2d923ab8c3aa2c63ec32fe4a7aa4993b12f3e03b2e255f1909b97f5e43b58226
          opentelemetry_community_demo: "true"
          prometheus.io/port: "9464"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: otelcol
          component: standalone-collector
          pod-template-hash: 5c757cfcf
      spec:
        containers:
        - args:
          - --config=/conf/relay.yaml
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GOMEMLIMIT
            value: 160MiB
          image: otel/opentelemetry-collector-contrib:0.113.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 13133
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: opentelemetry-collector
          ports:
          - containerPort: 6831
            name: jaeger-compact
            protocol: UDP
          - containerPort: 14250
            name: jaeger-grpc
            protocol: TCP
          - containerPort: 14268
            name: jaeger-thrift
            protocol: TCP
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 4317
            name: otlp
            protocol: TCP
          - containerPort: 4318
            name: otlp-http
            protocol: TCP
          - containerPort: 9464
            name: prometheus
            protocol: TCP
          - containerPort: 9411
            name: zipkin
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 13133
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 200Mi
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /conf
            name: opentelemetry-collector-configmap
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo-otelcol
        serviceAccountName: opentelemetry-demo-otelcol
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: relay
              path: relay.yaml
            name: opentelemetry-demo-otelcol
          name: opentelemetry-collector-configmap
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:50Z"
    generation: 1
    labels:
      app.kubernetes.io/component: paymentservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-paymentservice
      opentelemetry.io/name: opentelemetry-demo-paymentservice
      pod-template-hash: 857974bcdb
    name: opentelemetry-demo-paymentservice-857974bcdb
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-paymentservice
      uid: 7b2d90e8-0a87-40a2-b723-fccf5875adb0
    resourceVersion: "22096"
    uid: d73c5bfb-7991-49ed-95ec-80725db957d2
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-paymentservice
        pod-template-hash: 857974bcdb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: paymentservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-paymentservice
          opentelemetry.io/name: opentelemetry-demo-paymentservice
          pod-template-hash: 857974bcdb
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PAYMENT_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-paymentservice
          imagePullPolicy: IfNotPresent
          name: paymentservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:50Z"
    generation: 1
    labels:
      app.kubernetes.io/component: productcatalogservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-productcatalogservice
      opentelemetry.io/name: opentelemetry-demo-productcatalogservice
      pod-template-hash: 6bc98644f9
    name: opentelemetry-demo-productcatalogservice-6bc98644f9
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-productcatalogservice
      uid: 50867415-a2a9-4f63-ad88-b54b198ecc6e
    resourceVersion: "21974"
    uid: 434b24ee-6698-4b4a-beb8-1594fb59df01
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-productcatalogservice
        pod-template-hash: 6bc98644f9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: productcatalogservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-productcatalogservice
          opentelemetry.io/name: opentelemetry-demo-productcatalogservice
          pod-template-hash: 6bc98644f9
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PRODUCT_CATALOG_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-productcatalogservice
          imagePullPolicy: IfNotPresent
          name: productcatalogservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.55.1
      pod-template-hash: 57cd8f9d46
    name: opentelemetry-demo-prometheus-server-57cd8f9d46
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-prometheus-server
      uid: c22843a6-1edd-40bd-a087-62887d12780f
    resourceVersion: "22339"
    uid: d9eb7a9a-d25c-43c5-bd81-733766501727
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: prometheus
        pod-template-hash: 57cd8f9d46
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: server
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: prometheus
          app.kubernetes.io/part-of: prometheus
          app.kubernetes.io/version: v2.55.1
          pod-template-hash: 57cd8f9d46
      spec:
        containers:
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --enable-feature=exemplar-storage
          - --enable-feature=otlp-write-receiver
          image: quay.io/prometheus/prometheus:v2.55.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: opentelemetry-demo-prometheus-server
        serviceAccountName: opentelemetry-demo-prometheus-server
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: opentelemetry-demo-prometheus-server
          name: config-volume
        - emptyDir: {}
          name: storage-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:50Z"
    generation: 1
    labels:
      app.kubernetes.io/component: quoteservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-quoteservice
      opentelemetry.io/name: opentelemetry-demo-quoteservice
      pod-template-hash: 5658c58fd7
    name: opentelemetry-demo-quoteservice-5658c58fd7
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-quoteservice
      uid: 8462a53b-ece2-4bd6-b612-61fda705df64
    resourceVersion: "22137"
    uid: 0ed0f2c3-c802-4af4-b46c-668e99bb3c0f
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-quoteservice
        pod-template-hash: 5658c58fd7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: quoteservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-quoteservice
          opentelemetry.io/name: opentelemetry-demo-quoteservice
          pod-template-hash: 5658c58fd7
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: QUOTE_SERVICE_PORT
            value: "8080"
          - name: OTEL_PHP_AUTOLOAD_ENABLED
            value: "true"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-quoteservice
          imagePullPolicy: IfNotPresent
          name: quoteservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:51Z"
    generation: 1
    labels:
      app.kubernetes.io/component: recommendationservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-recommendationservice
      opentelemetry.io/name: opentelemetry-demo-recommendationservice
      pod-template-hash: 6f576fd574
    name: opentelemetry-demo-recommendationservice-6f576fd574
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-recommendationservice
      uid: f4b55336-ce3b-4950-8b29-d7a6725c8873
    resourceVersion: "22107"
    uid: b20edbf5-1348-4ff9-8af3-ace43c5c3e49
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-recommendationservice
        pod-template-hash: 6f576fd574
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: recommendationservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-recommendationservice
          opentelemetry.io/name: opentelemetry-demo-recommendationservice
          pod-template-hash: 6f576fd574
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: RECOMMENDATION_SERVICE_PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: opentelemetry-demo-productcatalogservice:8080
          - name: OTEL_PYTHON_LOG_CORRELATION
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: opentelemetry-demo-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-recommendationservice
          imagePullPolicy: IfNotPresent
          name: recommendationservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:51Z"
    generation: 1
    labels:
      app.kubernetes.io/component: shippingservice
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-shippingservice
      opentelemetry.io/name: opentelemetry-demo-shippingservice
      pod-template-hash: fcfc7765
    name: opentelemetry-demo-shippingservice-fcfc7765
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-shippingservice
      uid: a1b5ca35-96a0-419a-a30c-4cfe49519d7f
    resourceVersion: "22060"
    uid: c285c663-7db7-48ff-91fa-42bb3a8f9116
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-shippingservice
        pod-template-hash: fcfc7765
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: shippingservice
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-shippingservice
          opentelemetry.io/name: opentelemetry-demo-shippingservice
          pod-template-hash: fcfc7765
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: SHIPPING_SERVICE_PORT
            value: "8080"
          - name: QUOTE_SERVICE_ADDR
            value: http://opentelemetry-demo-quoteservice:8080
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: ghcr.io/open-telemetry/demo:1.12.0-shippingservice
          imagePullPolicy: IfNotPresent
          name: shippingservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-11-30T15:48:51Z"
    generation: 1
    labels:
      app.kubernetes.io/component: valkey
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opentelemetry-demo-valkey
      opentelemetry.io/name: opentelemetry-demo-valkey
      pod-template-hash: 68b4cb4498
    name: opentelemetry-demo-valkey-68b4cb4498
    namespace: otel-demo
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: opentelemetry-demo-valkey
      uid: b8e194c5-f263-4355-a721-6b1822ecf921
    resourceVersion: "22113"
    uid: 9ce590bc-a34b-4f8e-9405-784a4ecdcaa8
  spec:
    replicas: 1
    selector:
      matchLabels:
        opentelemetry.io/name: opentelemetry-demo-valkey
        pod-template-hash: 68b4cb4498
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: valkey
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opentelemetry-demo-valkey
          opentelemetry.io/name: opentelemetry-demo-valkey
          pod-template-hash: 68b4cb4498
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: opentelemetry-demo-otelcol
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.12.0
          image: valkey/valkey:7.2-alpine
          imagePullPolicy: IfNotPresent
          name: valkey
          ports:
          - containerPort: 6379
            name: valkey
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: opentelemetry-demo
        serviceAccountName: opentelemetry-demo
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{"majorVersion":"2"},"labels":{"app.kubernetes.io/component":"otel-demo-opensearch","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opensearch","app.kubernetes.io/version":"2.18.0"},"name":"otel-demo-opensearch","namespace":"otel-demo"},"spec":{"podManagementPolicy":"Parallel","replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opensearch"}},"serviceName":"otel-demo-opensearch-headless","template":{"metadata":{"annotations":{"configchecksum":"e8c450687c20323f6f710672deb70783c1872772b09c7e40d93ae72e602bec3"},"labels":{"app.kubernetes.io/component":"otel-demo-opensearch","app.kubernetes.io/instance":"opentelemetry-demo","app.kubernetes.io/name":"opensearch","app.kubernetes.io/version":"2.18.0"},"name":"otel-demo-opensearch"},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"app.kubernetes.io/instance","operator":"In","values":["opentelemetry-demo"]},{"key":"app.kubernetes.io/name","operator":"In","values":["opensearch"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"automountServiceAccountToken":false,"containers":[{"env":[{"name":"node.name","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"discovery.seed_hosts","value":"opensearch-cluster-master-headless"},{"name":"cluster.name","value":"demo-cluster"},{"name":"network.host","value":"0.0.0.0"},{"name":"OPENSEARCH_JAVA_OPTS","value":"-Xms300m -Xmx300m"},{"name":"node.roles","value":"master,ingest,data,remote_cluster_client,"},{"name":"discovery.type","value":"single-node"},{"name":"bootstrap.memory_lock","value":"true"},{"name":"DISABLE_INSTALL_DEMO_CONFIG","value":"true"},{"name":"DISABLE_SECURITY_PLUGIN","value":"true"}],"image":"opensearchproject/opensearch:2.18.0","imagePullPolicy":"IfNotPresent","name":"opensearch","ports":[{"containerPort":9200,"name":"http"},{"containerPort":9300,"name":"transport"},{"containerPort":9600,"name":"metrics"}],"readinessProbe":{"failureThreshold":3,"periodSeconds":5,"tcpSocket":{"port":9200},"timeoutSeconds":3},"resources":{"limits":{"memory":"1Gi"},"requests":{"cpu":"1000m","memory":"100Mi"}},"securityContext":{"capabilities":{"drop":["ALL"]},"runAsNonRoot":true,"runAsUser":1000},"startupProbe":{"failureThreshold":30,"initialDelaySeconds":5,"periodSeconds":10,"tcpSocket":{"port":9200},"timeoutSeconds":3},"volumeMounts":[{"mountPath":"/usr/share/opensearch/config/opensearch.yml","name":"config-emptydir","subPath":"opensearch.yml"}]}],"enableServiceLinks":true,"initContainers":[{"command":["sh","-c","#!/usr/bin/env bash\ncp -r /tmp/configfolder/*  /tmp/config/\n"],"image":"opensearchproject/opensearch:2.18.0","imagePullPolicy":"IfNotPresent","name":"configfile","resources":{},"volumeMounts":[{"mountPath":"/tmp/config/","name":"config-emptydir"},{"mountPath":"/tmp/configfolder/opensearch.yml","name":"config","subPath":"opensearch.yml"}]}],"securityContext":{"fsGroup":1000,"runAsUser":1000},"terminationGracePeriodSeconds":120,"volumes":[{"configMap":{"name":"otel-demo-opensearch-config"},"name":"config"},{"emptyDir":{},"name":"config-emptydir"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
      majorVersion: "2"
    creationTimestamp: "2024-11-30T15:48:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: otel-demo-opensearch
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/version: 2.18.0
    name: otel-demo-opensearch
    namespace: otel-demo
    resourceVersion: "22408"
    uid: 983c6e7d-3dbb-4ca4-8f9a-c5c9c781e9a0
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: opensearch
    serviceName: otel-demo-opensearch-headless
    template:
      metadata:
        annotations:
          configchecksum: e8c450687c20323f6f710672deb70783c1872772b09c7e40d93ae72e602bec3
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: otel-demo-opensearch
          app.kubernetes.io/instance: opentelemetry-demo
          app.kubernetes.io/name: opensearch
          app.kubernetes.io/version: 2.18.0
        name: otel-demo-opensearch
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - opentelemetry-demo
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - opensearch
                topologyKey: kubernetes.io/hostname
              weight: 1
        automountServiceAccountToken: false
        containers:
        - env:
          - name: node.name
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: discovery.seed_hosts
            value: opensearch-cluster-master-headless
          - name: cluster.name
            value: demo-cluster
          - name: network.host
            value: 0.0.0.0
          - name: OPENSEARCH_JAVA_OPTS
            value: -Xms300m -Xmx300m
          - name: node.roles
            value: master,ingest,data,remote_cluster_client,
          - name: discovery.type
            value: single-node
          - name: bootstrap.memory_lock
            value: "true"
          - name: DISABLE_INSTALL_DEMO_CONFIG
            value: "true"
          - name: DISABLE_SECURITY_PLUGIN
            value: "true"
          image: opensearchproject/opensearch:2.18.0
          imagePullPolicy: IfNotPresent
          name: opensearch
          ports:
          - containerPort: 9200
            name: http
            protocol: TCP
          - containerPort: 9300
            name: transport
            protocol: TCP
          - containerPort: 9600
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: 9200
            timeoutSeconds: 3
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: "1"
              memory: 100Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9200
            timeoutSeconds: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/opensearch/config/opensearch.yml
            name: config-emptydir
            subPath: opensearch.yml
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        initContainers:
        - command:
          - sh
          - -c
          - |
            #!/usr/bin/env bash
            cp -r /tmp/configfolder/*  /tmp/config/
          image: opensearchproject/opensearch:2.18.0
          imagePullPolicy: IfNotPresent
          name: configfile
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/config/
            name: config-emptydir
          - mountPath: /tmp/configfolder/opensearch.yml
            name: config
            subPath: opensearch.yml
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        terminationGracePeriodSeconds: 120
        volumes:
        - configMap:
            defaultMode: 420
            name: otel-demo-opensearch-config
          name: config
        - emptyDir: {}
          name: config-emptydir
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: otel-demo-opensearch-f57db845c
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: otel-demo-opensearch-f57db845c
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""

